<?xml version="1.0"?>
<project name="NUnit" default="build" basedir=".">

    <include buildfile="nunit.build.include"/>

<!--
    This build file will build NUnit for any of the supported
    runtimes which are actually installed.

    NOTE: This file has been tested using NAnt 0.85 RC 3

    Examples of Use:

        nant net-1.1 release build
        nant build-all
        nant clean build

    Runtime Support:

        net-1.0   Microsoft .NET version 1.0
        net-1.1   Microsoft .NET version 1.1
        net-2.0   Microsoft .NET version 2.0
        mono-1.0  Mono 1.0 Profile
        mono-2.0  Mono 2.0 Profile
    
        Debug and release versions of each of these may be built

    Default:

        Default is to build the debug version for .NET 1.1. This
        may be changed by setting the default properties below.

    Limitations:

    1. Currently, the .NET 1.0 builds of nunit-gui cannot be
       run successfully. This is because the resource files
       specify the use of .NET 1.1. This will be fixed in a
       follow-up release.

  -->

  <!-- Set Project name -->
  <property name="project.name" value="NUnit"/>

  <!-- NUnit version for packaging -->
  <property name="package.version" value="2.3.7003"/>

  <!-- Nominal version used for install directory and program
       files menu. Normally the major and minor portions
       of the package.version, but may differ when we are
       in alpha or beta. -->
  <property name="nominal.version" value="2.4" />

  <!-- NUnit executables and arguments -->
  <property name="nunit.gui.name" value="nunit.exe"/>
  <property name="nunit.console.name" value="nunit-console.exe"/>
  <property name="nunit.project.name" value="NUnitTests.nunit"/>
  <property name="nunit.base.tests" value="nunit.framework.tests.dll nunit.core.tests.dll nunit.extensions.tests.dll nunit.util.tests.dll nunit.mocks.tests.dll nunit-console.tests.dll"/>
  <property name="nunit.gui.tests" value="nunit.uikit.tests.dll nunit-gui.tests.dll"/>
  <property name="nunit.options" value=""/>

  <!-- NCover executable and arguments -->
  <property name="ncover.console.name" value="NCover.Console.exe"/>
  <property name="ncover.options" 
    value="//a nunit.framework;nunit.core;nunit.extensions;nunit.util;nunit.console;nunit.uikit;nunit-gui-runner"/>

  <!-- Project src dir is nant project base dir -->
  <property name="project.src.dir"
    value="${project::get-base-directory()}"/>

  <!-- Project base dir is the src dir's parent -->
  <property name="project.base.dir"
    value="${path::get-directory-name(project.src.dir)}"/>

  <!-- Other directories are derived from src and base -->
  <property name="project.build.dir" 
    value="${path::combine(project.base.dir,'build')}"/>
  <property name="project.package.dir" 
    value="${path::combine(project.base.dir,'package')}"/>
  <property name="project.doc.dir"
    value="${path::combine(project.base.dir,'doc')}"/>
  <property name="project.samples.dir"
    value="${path::combine(project.base.dir,'samples')}"/>
  <property name="project.tools.dir"
    value="${path::combine(project.base.dir,'tools')}"/>
  <property name="project.install.dir"
    value="${path::combine(project.src.dir, 'install')}"/>

  <!-- Individual Tool Directories -->
  <property name="wix.dir" 
    value="${path::combine(project.tools.dir,'WiX')}"/>
  <property name="ncover.dir" 
    value="${path::combine(project.tools.dir,'ncover')}"/>

  <!-- Frameworks supported by this build script. The first
         installed framework found is the default for builds. 
         The first .NET and Mono frameworks found are the
         respective net and mono defaults. -->
  <property name="supported.frameworks" 
    value="net-1.1,net-2.0,net-1.0,mono-1.0,mono-2.0"/>

  <!-- Root of the package file name -->
  <property name="package.name" 
    value="${project.name}-${package.version}"/>

  <!-- Package directories -->
  <property name="package.working.dir" 
    value="${path::combine(project.package.dir,package.name)}"/>
  <property name="package.bin.dir" 
    value="${path::combine(package.working.dir,'bin')}"/>
  <property name="package.doc.dir" 
    value="${path::combine(package.working.dir,'doc')}"/>
  <property name="package.samples.dir" 
    value="${path::combine(package.working.dir,'samples')}"/>
  <property name="package.src.dir" 
    value="${path::combine(package.working.dir,'src')}"/>
  <property name="package.resource.dir"
    value="${path::combine(package.working.dir, 'resources')}"/>
  <property name="wix.work.dir"
    value="${path::combine(project.package.dir, 'wixobj')}"/>

  <!-- Default build configuration -->
  <property name="build.config" value="debug"/>
  <property name="build.clean" value="false"/>
  <property name="build.dir.set" value="false"/>
  <property name="build.defines" value=""/>

  <!-- Default runtime configuration -->
  <foreach item="String" delim="," 
      property="framework" in="${supported.frameworks}">
    <if test="${framework::sdk-exists( framework )}">
      <property name="installed.frameworks" value="${installed.frameworks},${framework}"
        if="${property::exists('installed.frameworks')}"/>
      <property name="installed.frameworks" value="${framework}"
        unless="${property::exists('installed.frameworks')}"/>
      <property name="default.runtime" value="${framework}"
        unless="${property::exists('default.runtime')}"/>
      <property name="default.net.runtime" value="${framework}"
        if="${string::starts-with(framework,'net')}"
        unless="${property::exists('default.net.runtime')}"/>
      <property name="default.mono.runtime" value="${framework}"
        if="${string::starts-with(framework,'mono')}"
        unless="${property::exists('default.mono.runtime')}"/>
    </if>
  </foreach>
  <call target="set-${default.runtime}-runtime-config" />

  <!-- Test execution options -->
  <property name="test.options" value="" />

<!-- Targets that set the build configuration -->

  <target name="debug" description="Set config to debug for commands that follow">
    <call target="set-debug-build-config" />
  </target>

  <target name="release" description="Set config to release for commands that follow">
    <call target="set-release-build-config" />
  </target>

<!-- Targets that set the runtime configuration -->

  <target name="net" description="Set runtime to .NET 1.1 for commands that follow">
    <call target="set-default-dot-net-runtime-config"/>
  </target>

  <target name="net-1.0" description="Set runtime to .NET 1.0 for commands that follow">
    <call target="set-net-1.0-runtime-config"/>
  </target>

  <target name="net-1.1" description="Set runtime to .NET 1.1 for commands that follow">
    <call target="set-net-1.1-runtime-config"/>
  </target>
      
  <target name="net-2.0" description="Set runtime to .NET 2.0 for commands that follow">
    <call target="set-net-2.0-runtime-config"/>
  </target>
      
  <target name="mono" description="Set runtime to Mono 1.0 for commands that follow">
    <call target="set-default-mono-runtime-config"/>
  </target>

  <target name="mono-1.0" description="Set runtime to Mono 1.0 for commands that follow">
    <call target="set-mono-1.0-runtime-config"/>
  </target>
  
  <target name="mono-2.0" description="Set runtime to Mono 2.0 for commands that follow">
    <call target="set-mono-2.0-runtime-config"/>
  </target>

<!-- Targets that clean directories -->

  <target name="clean" depends="set-build-dir"
      description="Removes the current build directory">
    <delete dir="${current.build.dir}" 
      if="${directory::exists( current.build.dir )}"/>
  </target>

  <target name="clean-all" description="Removes all build directories">
    <delete dir="${project.build.dir}" 
      if="${directory::exists( project.build.dir )}"/>
  </target>

  <target name="clean-package-dir" depends="set-package-config"
    description="Removes the current package working directory">
        <delete dir="${package.working.dir}" 
            if="${directory::exists( package.working.dir )}"/>
  </target>

  <target name="clean-source-dirs">
    <delete>
      <fileset>
        <include name="*/*/obj/**/*"/>
        <include name="*/*/bin/**/*"/>
      </fileset>
    </delete>
  </target>
.
  <!-- Buildfiles for various components of NUnit -->
  <fileset id="project.buildfiles">

    <!-- NUnit Base -->
    <include name="NUnitFramework/framework/nunit.framework.build" />
    <include name="NUnitCore/interfaces/nunit.core.interfaces.build" />
    <include name="NUnitCore/core/nunit.core.build" />
    <include name="NUnitExtensions/framework/nunit.framework.extensions.build" />
    <include name="NUnitExtensions/core/nunit.core.extensions.build" />
    <include name="NUnitMocks/mocks/nunit.mocks.build" />
    <include name="ClientUtilities/util/nunit.util.build" />

    <!-- Console Runner -->
    <include name="ConsoleRunner/nunit-console/nunit-console.build" />
    <include name="ConsoleRunner/nunit-console-exe/nunit-console.exe.build" />

    <!-- Gui Runner -->
    <include name="GuiComponents/UiKit/nunit.uikit.build" if="${build.gui}" />
    <include name="GuiRunner/nunit-gui/nunit-gui.build" if="${build.gui}" />
    <include name="GuiRunner/nunit-gui-exe/nunit-gui.exe.build" if="${build.gui}" />

    <!-- Test Utilities and Dummy Projects -->
    <include name="tests/mock-assembly/mock-assembly.build" />
    <include name="tests/nonamespace-assembly/nonamespace-assembly.build" />
    <include name="tests/notestfixtures-assembly/notestfixtures-assembly.build" />
    <include name="tests/test-assembly/test-assembly.build" />
    <include name="tests/test-utilities/test-utilities.build" />
    <include name="tests/timing-tests/timing-tests.build" />

    <!-- NUnit Base Tests -->
    <include name="NUnitFramework/tests/nunit.framework.tests.build" />
    <include name="NUnitCore/tests/nunit.core.tests.build" />
    <include name="NUnitExtensions/tests/nunit.extensions.tests.build" />
    <include name="NUnitMocks/tests/nunit.mocks.tests.build" />
    <include name="ClientUtilities/tests/nunit.util.tests.build" />

    <!-- Console Runner Tests -->
    <include name="ConsoleRunner/tests/nunit-console.tests.build" />

    <!-- GUI Tests -->
    <include name="GuiComponents/tests/nunit.uikit.tests.build" if="${build.gui}" />
    <include name="GuiRunner/tests/nunit-gui.tests.build" if="${build.gui}" />
  </fileset>

  <!-- Targets that perform builds -->

  <target name="build" depends="make-build-dir"
    description="Build NUnit for a single runtime version and config">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} build"/>
    <echo message="*"/>

    <!-- Copy key file to base directory, so build can access it -->
    <copy file="nunit.snk" todir="${project.base.dir}"/>

    <!-- Build NUnit components and tests -->
    <nant target="build">
      <buildfiles refid="project.buildfiles" />
    </nant>

    <!-- Create NUnit and config files for running tests -->
    <copy file="NUnitBinTests.nunit"
      tofile="${current.build.dir}/NUnitTests.nunit"/>

    <copy file="NUnitBinTests.config"
      tofile="${current.build.dir}/NUnitTests.config"/>

    <!-- Copy clr.bat file for running under alternative frameworks -->
    <copy file="clr.bat"
      tofile="${current.build.dir}/clr.bat"/>

  </target>

  <target name="build-all" 
      description="Build all runtime versions, debug and release">
    <call target="set-debug-build-config"/>
    <call target="build-all-runtimes"/>
    <call target="set-release-build-config"/>
    <call target="build-all-runtimes"/>
  </target>

  <target name="build-all-configs"
      description="Build debug and release for selected runtime">
    <call target="set-debug-build-config"/>
    <call target="set-runtime-config"/>
    <call target="build"/>
    <call target="set-release-build-config"/>
    <call target="set-runtime-config"/>
    <call target="build"/>
  </target>

  <target name="build-all-runtimes"
      description="Build for each available runtime">
    <foreach item="String" delim="," 
        property="framework" in="${supported.frameworks}">
      <if test="${framework::sdk-exists( framework )}">
        <call target="set-${framework}-runtime-config"/>
        <call target="build"/>
      </if>
    </foreach>
  </target>

<!-- Test Server is experimental and not yet part of NUNit. -->

  <fileset id="nunit.server.buildfiles">
    <include name="NUnitTestServer/nunit-server/nunit-server.build" />
    <include name="NUnitTestServer/nunit-server-exe/nunit-server.exe.build" />
    <include name="NUnitTestServer/tests/nunit-server.tests.build" />
  </fileset>

  <target name="build-test-server" depends="make-build-dir">
    <nant target="build">
      <buildfiles refid="nunit.server.buildfiles" />
    </nant>
  </target>

<!-- Targets for running tests -->

  <target name="test" depends="build"
    description="Run tests for a build using console runner">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test run"/>
    <echo message="*"/>

    <!-- We use exec rather than the nunit2 task because we are testing
         a new build of NUnit which is likely not to be included in the Nant build -->
    <!-- Mono currently has a SIGSEGV fault if we run in a single AppDomain -->

    <property name="nunit.test.assemblies" 
      value="${nunit.base.tests} ${nunit.gui.tests}" if="${build.gui}"/>
    <property name="nunit.test.assemblies" 
      value="${nunit.base.tests}" unless="${build.gui}"/>
    <exec basedir="${current.build.dir}"
      workingdir="${current.build.dir}" 
	  program="${nunit.console.name}" 
      useruntimeengine="true"
	  commandline="${nunit.test.assemblies} ${nunit.options}"/>

  </target>

  <target name="test-coverage" depends="build"
    description="Run tests for a build under NCover to get coverage results">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test coverage run"/>
    <echo message="*"/>

    <!-- We use exec rather than the nunit2 task because we are testing
         a new build of NUnit which is likely not to be included in the Nant build -->
    <exec basedir="${ncover.dir}"
          workingdir="${current.build.dir}" 
	  program="${ncover.console.name}" 
      useruntimeengine="true"
	  commandline="${nunit.console.name} ${nunit.project.name} ${nunit.options} ${ncover.options}"
	if="${build.win32}" />

    <!-- Mono currently has a SIGSEGV fault if we run in a single AppDomain -->
         a new build of NUnit which is likely not to be included in the Nant build -->
    <exec basedir="${ncover.dir}"
          workingdir="${current.build.dir}" 
	  program="${ncover.console.name}" 
      useruntimeengine="true"
	  commandline="${nunit.console.name} ${nunit.test.assemblies} ${nunit.options}"
	unless="${build.win32}" />

  </target>

  <target name="test-all" 
      description="Test all runtime versions, debug and release">
    <call target="set-debug-build-config"/>
    <call target="test-all-runtimes"/>
    <call target="set-release-build-config"/>
    <call target="test-all-runtimes"/>
  </target>

  <target name="test-all-configs" 
      description="Test debug and release for selected runtime">
    <call target="set-debug-build-config"/>
    <call target="set-runtime-config"/>
    <call target="test"/>
    <call target="set-release-build-config"/>
    <call target="set-runtime-config"/>
    <call target="test"/>
  </target>

  <target name="test-all-runtimes"
      description="Test under each available runtime">
    <foreach item="String" delim="," 
        property="framework" in="${supported.frameworks}">
      <if test="${framework::sdk-exists( framework )}">
        <call target="set-${framework}-runtime-config"/>
        <call target="test" />
      </if>
    </foreach>
  </target>

  <target name="nunit2-test" depends="build"
    description="Run tests for a build using the nunit2 task">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test run"/>
    <echo message="*"/>

    <nunit2>
      <formatter type="Plain"/>
      <test assemblyname="${current.build.dir}/nunit.framework.tests.dll"/>
    </nunit2>
  </target>

  <target name="timing-test" depends="build"
    description="Run timing tests (long)">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} timing tests"/>
    <echo message="*"/>
    <echo message="* WARNING: Test may take some time to run"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}" 
      workingdir="${current.build.dir}" 
      program="${nunit.console.name}" 
      commandline="timing-tests.dll"/>

  </target>

  <target name="gui-test" depends="build"
    description="Run tests for a build using gui runner">

    <fail message="NUnit-gui is only available on Win32" unless="${platform::is-win32()}"/>

    <fail message="NUnit-gui is only available for Win32" unless="${platform::is-win32()}"/>

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} gui test run"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}" 
      workingdir="${current.build.dir}" 
      program="${nunit.gui.name}" 
      commandline="NunitTests.nunit"/>

  </target>

<!-- Targets to build the NUnit samples - not part of normal build -->
  <target name="build-samples" depends="build">
    <nant target="build">
      <buildfiles basedir="..\samples">
        <include name="**/*.build" />
      </buildfiles>
    </nant>
  </target>
<!-- Targets for packaging the NUnit distribution -->

  <!-- Produce all the standard packages for a release -->
  <target name="package-release" depends="build"
      description="Create standard packages for distribution">
      
    <call target="package-src"/>

    <call target="set-release-build-config"/>

    <call target="set-net-1.1-runtime-config"/>
    <call target="package-zip"/>
    <call target="package-msi" if="${platform::is-win32()}"/>

    <call target="set-net-2.0-runtime-config"/>
    <call target="package-zip"/>
    <call target="package-msi" if="${platform::is-win32()}"/>

  </target>

  
  <!-- Package current config as a zip --> 
  <target name="package-zip" depends="clean-package-dir" description="Create distribution package">

    <call target="copy-bins"/>
    <call target="copy-docs"/>
    <call target="copy-samples"/>

	<!-- Remove any temporary output files produced by tests
		from the build directory - temporary fix -->
    <delete>
      <fileset>
        <include name="temp*.xml"/>
      </fileset>
    </delete>

    <!-- Create the zip file -->
    <zip zipfile="${project.package.dir}/${zip.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

  <target name="package-src" depends="clean-package-dir"
    description="Create full source package for developer use">

    <call target="copy-docs"/>
    <call target="copy-samples"/>
    <call target="copy-src"/>

    <!-- Create the zip file -->
    <zip zipfile="${project.package.dir}/${zipped.src.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>
  
  <target name="package-resources" depends="clean-package-dir">

    <copy todir="${package.resource.dir}/nunit-gui-runner">
      <fileset basedir="GuiRunner/nunit-gui/obj/Release">
        <include name="*.resources"/>
      </fileset>
    </copy>

    <copy todir="${package.resource.dir}/nunit.uikit">
      <fileset basedir="GuiComponents/UiKit/obj/Release">
        <include name="NUnit.UiKit.AddConfigurationDialog.resources"/>
        <include name="NUnit.UiKit.AssemblyPathDialog.resources"/>
        <include name="NUnit.UiKit.ConfigurationEditor.resources"/>
        <include name="NUnit.UiKit.RenameConfigurationDialog.resources"/>
        <include name="NUnit.UiKit.TestPropertiesDialog.resources"/>
        <include name="NUnit.UiKit.TestTree.resources"/>
      </fileset>
    </copy>

    <copy todir="${package.working.dir}">
      <fileset basedir="../tools/localization">
        <include name="*.*"/>
      </fileset>
    </copy>

    <if test="${property::exists('localize')}">
    <foreach property="culture" item="String" delim="," 
        in="${localize}">
    <foreach property="folder" item="Folder" 
        in="${package.working.dir}/resources">
      <property name="proj" 
        value="${path::get-file-name(folder)}"/>
      <property name="projdir" 
        value="${package.working.dir}/${culture}/${proj}"/>
    <foreach property="file" item="File" in="${folder}">
      <property name="filename"
        value="${path::get-file-name-without-extension(file)}"/>
      <copy file="${file}" 
        tofile="${projdir}/${filename}.${culture}.resources"/>"/>
    </foreach>
    </foreach>
    </foreach>   
    </if>

    <zip zipfile="${project.package.dir}/${zipped.resource.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>

  </target>

  <target name="package-msi" depends="clean-package-dir"
    description="Build msi file and deploy it to the package dir">
  
    <fail message="MSI can only be built on the Win32 platform" unless="${platform::is-win32()}"/>
    <fail message="MSI can only be built for a Win32 runtime" unless="${build.win32}"/>

    <echo message="*"/>
    <echo message="* Building msi for ${runtime.config}  ${build.config}"/>
    <echo message="*"/>

    <!-- First create a directory image as for zip installs -->
    <call target="copy-bins" />
    <call target="copy-docs" />
    <call target="copy-samples" />

    <copy file="license.rtf" todir="${package.working.dir}" />
    <copy file="GuiRunner/nunit-gui/Logo.ico" todir="${package.working.dir}" />

    <property name="wix.work.dir"
      value="${package.working.dir}"/>

    <candle out="${wix.work.dir}/" exedir="${wix.dir}">
      <defines>
        <define name="ProductVersion" value="${package.version}" />
        <define name="NominalVersion" value="${nominal.version}" />
      </defines>
      <sources basedir="${project.install.dir}">
        <include name="bin.wxs" />
        <include name="nunit-gui.wxs" />
        <include name="doc.wxs" />
        <include name="tests.wxs" />
        <include name="samples.wxs" />
        <include name="NUnit.wxs" />
      </sources>
    </candle>

    <light exedir="${wix.dir}"
      out="${project.package.dir}/${msi.file.name}" 
      locfile="${wix.dir}/WixUI_en-us.wxl">
      <sources>
        <include name="${wix.work.dir}/NUnit.wixobj" />
        <include name="${wix.work.dir}/bin.wixobj" />
        <include name="${wix.work.dir}/nunit-gui.wixobj" />
        <include name="${wix.work.dir}/doc.wixobj" />
        <include name="${wix.work.dir}/samples.wixobj" />
        <include name="${wix.work.dir}/tests.wixobj" />
        <include name="${wix.dir}/wixui.wixlib" />
      </sources>
    </light>

  </target>

</project>
