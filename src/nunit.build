<?xml version="1.0"?>
<project name="NUnit" default="build" basedir=".">

    <include buildfile="nunit.build.include"/>

<!--
    This build file will build NUnit for any of the supported
    runtimes which are actually installed.

    NOTE: This file uses features that are not available in 
    NAnt 0.84. It has been tested using the nightly download
    of NAnt 0.85 for 30 April 2006.

    Examples of Use:

        nant net-1.1 release build
        nant build-all
        nant clean build

    Runtime Support:

        net-1.0   Microsoft .NET version 1.0
        net-1.1   Microsoft .NET version 1.1
        net-2.0   Microsoft .NET version 2.0
        mono-1.0  Mono 1.0 Profile
        mono-2.0  Mono 2.0 Profile
    
        Debug and release versions of each of these may be built

    Default:

        Default is to build the debug version for .NET 1.1. This
        may be changed by setting the default properties below.

    Limitations:

    1. Currently, the .NET 1.0 builds of nunit-gui cannot be
       run successfully. This is because the resource files
       specify the use of .NET 1.1. This will be fixed in a
       follow-up release.

  -->

  <!-- Set Project name -->
  <property name="project.name" value="NUnit"/>

  <!-- NUnit version for packaging -->
  <property name="package.version" value="2.3.7003"/>

  <!-- Nominal version used for install directory and program
       files menu. Normally the major and minor portions
       of the package.version, but may differ when we are
       in alpha or beta. -->
  <property name="nominal.version" value="2.4" />

  <!-- NUnit executables and arguments -->
  <property name="nunit.gui.name" value="nunit.exe"/>
  <property name="nunit.console.name" value="nunit-console.exe"/>
  <property name="nunit.project.name" value="NUnitTests.nunit"/>
  <property name="nunit.base.tests" value="nunit.framework.tests.dll nunit.core.tests.dll nunit.extensions.tests.dll nunit.util.tests.dll nunit.mocks.tests.dll nunit-console.tests.dll"/>
  <property name="nunit.gui.tests" value="nunit.uikit.tests.dll nunit-gui.tests.dll"/>
  <property name="nunit.options" value=""/>

  <!-- NCover executable and arguments -->
  <property name="ncover.console.name" value="NCover.Console.exe"/>
  <property name="ncover.options" 
    value="//a nunit.framework;nunit.core;nunit.extensions;nunit.util;nunit.console;nunit.uikit;nunit-gui-runner"/>

  <!-- Project src dir is nant project base dir -->
  <property name="project.src.dir"
    value="${project::get-base-directory()}"/>

  <!-- Project base dir is the src dir's parent -->
  <property name="project.base.dir"
    value="${path::get-directory-name(project.src.dir)}"/>

  <!-- Other directories are derived from src and base -->
  <property name="project.build.dir" 
    value="${path::combine(project.base.dir,'build')}"/>
  <property name="project.package.dir" 
    value="${path::combine(project.base.dir,'package')}"/>
  <property name="project.doc.dir"
    value="${path::combine(project.base.dir,'doc')}"/>
  <property name="project.samples.dir"
    value="${path::combine(project.base.dir,'samples')}"/>
  <property name="project.tools.dir"
    value="${path::combine(project.base.dir,'tools')}"/>
  <property name="project.install.dir"
    value="${path::combine(project.src.dir, 'install')}"/>

  <!-- Individual Tool Directories -->
  <property name="wix.dir" 
    value="${path::combine(project.tools.dir,'WiX')}"/>
  <property name="ncover.dir" 
    value="${path::combine(project.tools.dir,'ncover')}"/>

  <!-- Frameworks supported by this build script. The first
         installed framework found is the default for builds. 
         The first .NET and Mono frameworks found are the
         respective net and mono defaults. -->
  <property name="supported.frameworks" 
    value="net-2.0,net-1.1,net-1.0,mono-1.0,mono-2.0"/>

  <!-- Root of the package file name -->
  <property name="package.name" 
    value="${project.name}-${package.version}"/>

  <fileset id="project.base.buildfiles">
    <include name="NUnitFramework/framework/nunit.framework.build" />
    <include name="NUnitFramework/tests/nunit.framework.tests.build" />
    <include name="NUnitCore/core/nunit.core.build" />
    <include name="NUnitCore/tests/nunit.core.tests.build" />
  </fileset>

  <fileset id="project.gui.buildfiles">
  </fileset>

  <!-- Package directories -->
  <property name="package.working.dir" 
    value="${path::combine(project.package.dir,package.name)}"/>
  <property name="package.bin.dir" 
    value="${path::combine(package.working.dir,'bin')}"/>
  <property name="package.doc.dir" 
    value="${path::combine(package.working.dir,'doc')}"/>
  <property name="package.samples.dir" 
    value="${path::combine(package.working.dir,'samples')}"/>
  <property name="package.src.dir" 
    value="${path::combine(package.working.dir,'src')}"/>
  <property name="package.resource.dir"
    value="${path::combine(package.working.dir, 'resources')}"/>
  <property name="wix.work.dir"
    value="${path::combine(project.package.dir, 'wixobj')}"/>

  <!-- Default build configuration -->
  <property name="build.config" value="debug"/>
  <property name="build.clean" value="false"/>
  <property name="build.dir.set" value="false"/>
  <property name="build.defines" value=""/>

  <!-- Default runtime configuration -->
  <foreach item="String" delim="," 
      property="framework" in="${supported.frameworks}">
    <if test="${framework::sdk-exists( framework )}">
      <property name="installed.frameworks" value="${installed.frameworks},${framework}"
        if="${property::exists('installed.frameworks')}"/>
      <property name="installed.frameworks" value="${framework}"
        unless="${property::exists('installed.frameworks')}"/>
      <property name="default.runtime" value="${framework}"
        unless="${property::exists('default.runtime')}"/>
      <property name="default.net.runtime" value="${framework}"
        if="${string::starts-with(framework,'net')}"
        unless="${property::exists('default.net.runtime')}"/>
      <property name="default.mono.runtime" value="${framework}"
        if="${string::starts-with(framework,'mono')}"
        unless="${property::exists('default.mono.runtime')}"/>
    </if>
  </foreach>
  <call target="set-${default.runtime}-runtime-config" />

  <!-- Test execution options -->
  <property name="test.options" value="" />

  <!-- Targets that set the build configuration -->

  <target name="debug" description="Set config to debug for commands that follow">
    <call target="set-debug-build-config" />
  </target>

  <target name="release" description="Set config to release for commands that follow">
    <call target="set-release-build-config" />
  </target>

<!-- Targets that set the runtime configuration -->

  <target name="net" description="Set runtime to .NET 1.1 for commands that follow">
    <call target="set-default-dot-net-runtime-config"/>
  </target>

  <target name="net-1.0" description="Set runtime to .NET 1.0 for commands that follow">
    <call target="set-net-1.0-runtime-config"/>
  </target>

  <target name="net-1.1" description="Set runtime to .NET 1.1 for commands that follow">
    <call target="set-net-1.1-runtime-config"/>
  </target>
      
  <target name="net-2.0" description="Set runtime to .NET 2.0 for commands that follow">
    <call target="set-net-2.0-runtime-config"/>
  </target>
      
  <target name="mono" description="Set runtime to Mono 1.0 for commands that follow">
    <call target="set-default-mono-runtime-config"/>
  </target>

  <target name="mono-1.0" description="Set runtime to Mono 1.0 for commands that follow">
    <call target="set-mono-1.0-runtime-config"/>
  </target>
  
  <target name="mono-2.0" description="Set runtime to Mono 2.0 for commands that follow">
    <call target="set-mono-2.0-runtime-config"/>
  </target>

<!-- Targets that clean directories -->

  <target name="clean" depends="set-build-dir"
      description="Removes the current build directory">
    <delete dir="${current.build.dir}" 
      if="${directory::exists( current.build.dir )}"/>
  </target>

  <target name="clean-all" description="Removes all build directories">
    <delete dir="${project.build.dir}" 
      if="${directory::exists( project.build.dir )}"/>
  </target>

  <target name="clean-package-dir" depends="set-package-config"
    description="Removes the current package working directory">
        <delete dir="${package.working.dir}" 
            if="${directory::exists( package.working.dir )}"/>
  </target>

  <target name="clean-source-dirs">
    <delete>
      <fileset>
        <include name="*/*/obj/**/*"/>
        <include name="*/*/bin/**/*"/>
      </fileset>
    </delete>
  </target>
.
  <!-- Targets that perform builds -->

  <target name="build" depends="make-build-dir"
    description="Build NUnit for a single runtime version and config">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} build"/>
    <echo message="*"/>

    <!-- Copy key file to base directory, so build can access it -->
    <copy file="nunit.snk" todir="${project.base.dir}"/>

    <!-- Build NUnit components assemblies -->
    <!--<call target="build-framework" />-->
    <nant target="build" buildfile="NUnitFramework/framework/nunit.framework.build" />
    <call target="build-core-interfaces" />
    <call target="build-core" />
    <call target="build-framework-extensions" />
    <call target="build-core-extensions" />
    <call target="build-mocks" />
    <call target="build-util" />
    <call target="build-console" />
    <call target="build-console-exe" />
    <call target="build-test-server" if="${build.win32}" />
    <call target="build-test-server-exe" if="${build.win32}" />

    <if test="${build.gui}">
      <call target="build-uikit"/>
      <call target="build-gui-runner"/>
      <call target="build-gui-runner-exe"/>
    </if>

    <!-- Build the Test Utilities and dummy projects -->
    <call target="build-mock-assembly"/>
    <call target="build-nonamespace-assembly"/>
    <call target="build-notestfixtures-assembly"/>
    <call target="build-test-assembly"/>
    <call target="build-test-utilities"/>
    <call target="build-timing-tests"/>

    <!-- Build the NUnit tests -->
    <call target="build-framework-tests"/>
    <call target="build-core-tests"/>
    <call target="build-util-tests"/>
    <call target="build-extension-tests"/>
    <call target="build-mock-tests"/>
    <call target="build-console-tests"/>

    <!-- test-server not yet implemented for mono -->
    <if test="${build.win32}">
      <call target="build-test-server-tests"/>
    </if>

    <if test="${build.gui}">
      <call target="build-uikit-tests"/>
      <call target="build-gui-runner-tests"/>
    </if>

    <!-- Create NUnit and config files for running tests -->
    <copy file="NUnitBinTests.nunit"
      tofile="${current.build.dir}/NUnitTests.nunit"/>

    <copy file="NUnitBinTests.config"
      tofile="${current.build.dir}/NUnitTests.config"/>

    <!-- Copy clr.bat file for running under alternative frameworks -->
    <copy file="clr.bat"
      tofile="${current.build.dir}/clr.bat"/>

  </target>

  <target name="build-all" 
      description="Build all runtime versions, debug and release">
    <call target="set-debug-build-config"/>
    <call target="build-all-runtimes"/>
    <call target="set-release-build-config"/>
    <call target="build-all-runtimes"/>
  </target>

  <target name="build-all-configs"
      description="Build debug and release for selected runtime">
    <call target="set-debug-build-config"/>
    <call target="set-runtime-config"/>
    <call target="build"/>
    <call target="set-release-build-config"/>
    <call target="set-runtime-config"/>
    <call target="build"/>
  </target>

  <target name="build-all-runtimes"
      description="Build for each available runtime">
    <foreach item="String" delim="," 
        property="framework" in="${supported.frameworks}">
      <if test="${framework::sdk-exists( framework )}">
        <call target="set-${framework}-runtime-config"/>
        <call target="build"/>
      </if>
    </foreach>
  </target>

<!-- Targets that build individual projects. These may be run separately, but
     it's up to the user to honor any dependencies. -->

  <target name="build-framework" depends="make-build-dir">
    <csc target="library"
        output="${current.build.dir}/nunit.framework.dll"
        doc="${current.build.dir}/nunit.framework.xml"
        debug="${build.debug}" 
        define="${build.defines}">
      <nowarn>
        <warning number="618,672"/>
      </nowarn>
      <sources basedir="NUnitFramework/framework">
        <include name="AbstractAsserter.cs"/>
        <include name="AssemblyInfo.cs"/>
        <include name="Assert.cs"/>
        <include name="Assertion.cs"/>
        <include name="AssertionException.cs"/>
        <include name="AssertionFailureMessage.cs"/>
        <include name="CategoryAttribute.cs"/>
        <include name="CollectionAssert.cs"/>
        <include name="ComparisonAsserter.cs"/>
        <include name="DescriptionAttribute.cs"/>
        <include name="EqualAsserter.cs"/>
        <include name="EqualityAsserter.cs"/>
        <include name="ExpectedExceptionAttribute.cs"/>
        <include name="ExplicitAttribute.cs"/>
        <include name="FileAssert.cs"/>
        <include name="GreaterAsserter.cs"/>
        <include name="GreaterEqualAsserter.cs"/>
        <include name="IAsserter.cs"/>
        <include name="IExpectException.cs"/>
        <include name="IgnoreAttribute.cs"/>
        <include name="IgnoreException.cs"/>
        <include name="LessAsserter.cs"/>
        <include name="LessEqualAsserter.cs"/>
        <include name="ListContentsAsserter.cs"/>
        <include name="NotEqualAsserter.cs"/>
        <include name="NotSameAsserter.cs"/>
        <include name="OldTestCase.cs"/>
        <include name="PlatformAttribute.cs"/>
        <include name="PropertyAttribute.cs"/>
        <include name="SameAsserter.cs"/>
        <include name="SetUpAttribute.cs"/>
        <include name="SetUpFixtureAttribute.cs"/>
        <include name="StreamAsserter.cs"/>
        <include name="StringAssert.cs"/>
        <include name="StringAsserters.cs"/>
        <include name="SuiteAttribute.cs"/>
        <include name="TearDownAttribute.cs"/>
        <include name="TestAttribute.cs"/>
        <include name="TestFixtureAttribute.cs"/>
        <include name="TestFixtureSetUpAttribute.cs"/>
        <include name="TestFixtureTearDownAttribute.cs"/>
        <include name="TypeAsserters.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
    </csc>
  </target>

  <fileset id="framework-extensions-sources" basedir="NUnitExtensions/framework">
     <include name="AssemblyInfo.cs"/>
     <include name="RepeatAttribute.cs"/>
     <include name="../../CommonAssemblyInfo.cs"/>
  </fileset>

  <target name="build-framework-extensions" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit.framework.extensions.dll"
        debug="${build.debug}" define="${build.defines}">
      <sources refid="framework-extensions-sources"/>
      <references basedir="${current.build.dir}">
        <include name="nunit.framework.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-mocks" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit.mocks.dll"
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="NUnitMocks/mocks">
        <include name="AssemblyInfo.cs"/>
        <include name="DynamicMock.cs"/>
        <include name="ICall.cs"/>
        <include name="ICallHandler.cs"/>
        <include name="IMethod.cs"/>
        <include name="IMock.cs"/>
        <include name="IVerify.cs"/>
        <include name="MethodSignature.cs"/>
        <include name="Mock.cs"/>
        <include name="MockCall.cs"/>
        <include name="MockInterfaceHandler.cs"/>
        <include name="MockMethod.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.framework.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-core-interfaces" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit.core.interfaces.dll"
        debug="${build.debug}" 
        define="${build.defines}">
      <sources basedir="NUnitCore/interfaces">
        <include name="AssemblyInfo.cs"/>
        <include name="EventListener.cs"/>
        <include name="IService.cs"/>
        <include name="ITest.cs"/>
        <include name="ITestFilter.cs"/>
        <include name="ResultState.cs"/>
        <include name="ResultVisitor.cs"/>
        <include name="RunState.cs"/>
        <include name="RuntimeFramework.cs"/>
        <include name="Test.cs"/>
        <include name="TestAssemblyInfo.cs"/>
        <include name="TestCaseResult.cs"/>
        <include name="TestFilter.cs"/>
        <include name="TestID.cs"/>
        <include name="TestInfo.cs"/>
        <include name="TestName.cs"/>
        <include name="TestNode.cs"/>
        <include name="TestOutput.cs"/>
        <include name="TestPackage.cs"/>
        <include name="TestResult.cs"/>
        <include name="TestRunner.cs"/>
        <include name="TestSuiteResult.cs"/>
        <include name="Extensibility/Addin.cs"/>
        <include name="Extensibility/AddinStatus.cs"/>
        <include name="Extensibility/ExtensionType.cs"/>
        <include name="Extensibility/IAddin.cs"/>
        <include name="Extensibility/IAddinRegistry.cs"/>
        <include name="Extensibility/IExtensionHost.cs"/>
        <include name="Extensibility/IExtensionPoint.cs"/>
        <include name="Extensibility/IFrameworkRegistry.cs"/>
        <include name="Extensibility/ISuiteBuilder.cs"/>
        <include name="Extensibility/ITestCaseBuilder.cs"/>
        <include name="Extensibility/ITestDecorator.cs"/>
        <include name="Extensibility/NUnitAddinAttribute.cs"/>
        <include name="Extensibility/TestFramework.cs"/>
        <include name="Filters/AndFilter.cs"/>
        <include name="Filters/CategoryFilter.cs"/>
        <include name="Filters/NameFilter.cs"/>
        <include name="Filters/NotFilter.cs"/>
        <include name="Filters/RecursiveTestFilter.cs"/>
        <include name="Filters/SimpleNameFilter.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
    </csc>
  </target>

  <target name="build-core" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit.core.dll"
        debug="${build.debug}" 
        define="${build.defines}">
      <sources basedir="NUnitCore/core">
        <include name="AbstractTestCaseDecoration.cs"/>
        <include name="AssemblyInfo.cs"/>
        <include name="AssemblyReader.cs"/>
        <include name="AssemblyResolver.cs"/>
        <include name="CoreExtensions.cs"/>
        <include name="DelegatingTestRunner.cs"/>
        <include name="DirectorySwapper.cs"/>
        <include name="EventListenerTextWriter.cs"/>
        <include name="EventPump.cs"/>
        <include name="EventQueue.cs"/>
        <include name="ExtensionHost.cs"/>
        <include name="IgnoreDecorator.cs"/>
        <include name="InvalidSuiteException.cs"/>
        <include name="InvalidTestFixtureException.cs"/>
        <include name="LegacySuite.cs"/>
        <include name="NamespaceTreeBUilder.cs"/>
        <include name="NoTestFixturesException.cs"/>
        <include name="NotRunnableTestCase.cs"/>
        <include name="NullListener.cs"/>
        <include name="NUnitException.cs"/>
        <include name="NUnitFramework.cs"/>
        <include name="NUnitTestFixture.cs"/>
        <include name="NUnitTestMethod.cs"/>
        <include name="PlatformHelper.cs"/>
        <include name="QueuingEventListener.cs"/>
        <include name="Reflect.cs"/>
        <include name="RemoteTestRunner.cs"/>
        <include name="SetupFixture.cs"/>
        <include name="SimpleTestRunner.cs"/>
        <include name="StringTextWriter.cs"/>
        <include name="SuiteBuilderAttribute.cs"/>
        <include name="TestBuilderAttribute.cs"/>
        <include name="TestCase.cs"/>
        <include name="TestCaseBuilder.cs"/>
        <include name="TestCaseBuilderAttribute.cs"/>
        <include name="TestContext.cs"/>
        <include name="TestDecoratorAttribute.cs"/>
        <include name="TestFixture.cs"/>
        <include name="TestFixtureBuilder.cs"/>
        <include name="TestMethod.cs"/>
        <include name="TestRunnerThread.cs"/>
        <include name="TestSuite.cs"/>
        <include name="TestSuiteBuilder.cs"/>
        <include name="ThreadedTestRunner.cs"/>
        <include name="Builders/AbstractFixtureBuilder.cs"/>
        <include name="Builders/AbstractTestCaseBuilder.cs"/>
        <include name="Builders/LegacySuiteBuilder.cs"/>
        <include name="Builders/NUnitTestCaseBuilder.cs"/>
        <include name="Builders/NUnitTestFixtureBuilder.cs"/>
        <include name="Builders/SetUpFixtureBuilder.cs"/>
        <include name="Builders/TestAssemblyBuilder.cs"/>
        <include name="Extensibility/EventListenerCollection.cs"/>
        <include name="Extensibility/FrameworkRegistry.cs"/>
        <include name="Extensibility/SuiteBuilderCollection.cs"/>
        <include name="Extensibility/TestCaseBuilderCollection.cs"/>
        <include name="Extensibility/TestDecoratorCollection.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.core.interfaces.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-core-extensions" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit.core.extensions.dll"
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="NUnitExtensions/core">
        <include name="AssemblyInfo.cs"/>
        <include name="RepeatedTestCase.cs"/>
        <include name="RepeatedTestDecorator.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-util" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit.util.dll"
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="ClientUtilities/util">
        <include name="AggregatingTestRunner.cs"/>
        <include name="AssemblyInfo.cs"/>
        <include name="AssemblyList.cs"/>
        <include name="AssemblyWatcher.cs"/>
        <include name="CategoryManager.cs"/>
        <include name="CommandLineOptions.cs"/>
        <include name="ConsoleWriter.cs"/>
        <include name="ISettings.cs"/>
        <include name="ITestEvents.cs"/>
        <include name="ITestLoader.cs"/>
        <include name="MemorySettingsStorage.cs"/>
        <include name="MultipleTestDomainRunner.cs"/>
        <include name="NUnitProject.cs"/>
        <include name="NUnitRegistry.cs"/>
        <include name="PathUtils.cs"/>
        <include name="ProcessRunner.cs"/>
        <include name="ProjectConfig.cs"/>
        <include name="ProjectConfigCollection.cs"/>
        <include name="ProjectFormatException.cs"/>
        <include name="ProxyTestRunner.cs"/>
        <include name="RecentFileEntry.cs"/>
        <include name="RecentFiles.cs"/>
        <include name="RecentFilesCollection.cs"/>
        <include name="RegistrySettingsStorage.cs"/>
        <include name="ResultSummarizer.cs"/>
        <include name="Services.cs"/>
        <include name="SettingsGroup.cs"/>
        <include name="SettingsStorage.cs"/>
        <include name="StackTraceFilter.cs"/>
        <include name="SummaryVisitor.cs"/>
        <include name="TestDomain.cs"/>
        <include name="TestEventArgs.cs"/>
        <include name="TestEventDispatcher.cs"/>
        <include name="TestExceptionHandler.cs"/>
        <include name="TestLoader.cs"/>
        <include name="TestObserver.cs"/>
        <include name="TestResultItem.cs"/>
        <include name="VSProject.cs"/>
        <include name="VSProjectConfig.cs"/>
        <include name="VSProjectConfigCollection.cs"/>
        <include name="XmlResultTransform.cs"/>
        <include name="XmlResultVisitor.cs"/>
        <include name="XmlSettingsStorage.cs"/>
        <include name="Services/AddinManager.cs"/>
        <include name="Services/AddinRegistry.cs"/>
        <include name="Services/DomainManager.cs"/>
        <include name="Services/RecentFilesService.cs"/>
        <include name="Services/ServiceManager.cs"/>
        <include name="Services/SettingsService.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <resources basedir="ClientUtilities/util" prefix="NUnit.Util">
        <include name="Transform.resx"/>
      </resources>
      <references basedir="${current.build.dir}">
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.framework.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-console" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit-console-runner.dll"
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="ConsoleRunner/nunit-console">
        <include name="AssemblyInfo.cs"/>
        <include name="ConsoleOptions.cs"/>
        <include name="ConsoleUi.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.util.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-console-exe" depends="make-build-dir">
    <csc target="exe" 
        output="${current.build.dir}/${nunit.console.name}"
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="ConsoleRunner/nunit-console-exe">
        <include name="AssemblyInfo.cs"/>
        <include name="Class1.cs"/>
	<include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.core.dll"/>
        <include name="nunit.util.dll"/>
        <include name="nunit-console-runner.dll"/>
      </references>
    </csc>

    <copy file="ConsoleRunner/nunit-console-exe/App.config"
      tofile="${current.build.dir}/${nunit.console.name}.config"/>
  </target>

  <target name="build-test-server" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit-test-server.dll"
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="NUnitTestServer/nunit-server">
        <include name="ServerUtilities.cs"/>
        <include name="TestServer.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-test-server-exe" depends="make-build-dir">
    <csc target="exe" 
        output="${current.build.dir}/nunit-server.exe"
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="NUnitTestServer/nunit-server-exe">
        <include name="TestServerConsoleApp.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit-test-server.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-uikit" depends="make-build-dir">
    <csc target="library" 
    output="${current.build.dir}/nunit.uikit.dll"
    debug="${build.debug}" define="${build.defines}">
      <sources basedir="GuiComponents/UiKit">
        <include name="AddConfigurationDialog.cs"/>
        <include name="AppContainer.cs"/>
        <include name="AssemblyInfo.cs"/>
        <include name="AssemblyListBox.cs"/>
        <include name="AssemblyPathDialog.cs"/>
        <include name="CommonAssemblyInfo.cs"/>
        <include name="ConfigurationEditor.cs"/>
        <include name="ErrorDisplay.cs"/>
        <include name="ExpandingLabel.cs"/>
        <include name="ExpandingTextBox.cs"/>
        <include name="FolderBrowser.cs"/>
        <include name="GuiTestEventDispatcher.cs"/>
        <include name="NotRunTree.cs"/>
        <include name="ProgressBar.cs"/>
        <include name="RecentFileMenuHandler.cs"/>
        <include name="RenameConfigurationDialog.cs"/>
        <include name="ResultTabs.cs"/>
        <include name="RichEditTabPage.cs"/>
        <include name="StatusBar.cs"/>
        <include name="TestLoaderUI.cs"/>
        <include name="TestPropertiesDialog.cs"/>
        <include name="TestSuiteTreeNode.cs"/>
        <include name="TestSuiteTreeView.cs"/>
        <include name="TestTree.cs"/>
        <include name="TextBoxWriter.cs"/>
        <include name="TipWindow.cs"/>
        <include name="UserMessage.cs"/>
        <include name="WaitCursor.cs"/>
        <include name="WritableTextDisplay.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <resources basedir="GuiComponents/UiKit" prefix="NUnit.UiKit">
        <include name="AddConfigurationDialog.resx"/>
        <include name="AssemblyListBox.resx"/>
        <include name="AssemblyPathDialog.resx"/>
        <include name="ConfigurationEditor.resx"/>
        <include name="ErrorDisplay.resx"/>
        <include name="ExpandingLabel.resx"/>
        <include name="ExpandingTextBox.resx"/>
        <include name="NotRunTree.resx"/>
        <include name="ProgressBar.resx"/>
        <include name="RenameConfigurationDialog.resx"/>
        <include name="ResultTabs.resx"/>
        <include name="RichEditTabPage.resx"/>
        <include name="StatusBar.resx"/>
        <include name="TestPropertiesDialog.resx"/>
        <include name="TestSuiteTreeView.resx"/>
        <include name="TestTree.resx"/>
        <include name="TipWindow.resx"/>
        <include name="UserMessage.resx"/>
        <include name="WritableTextDisplay.resx"/>
        <include name="Ellipsis.gif"/>
        <include name="pinned.gif"/>
        <include name="unpinned.gif"/>
      </resources>
      <references basedir="${current.build.dir}">
        <include name="System.Windows.Forms.dll"/>
        <include name="System.Drawing.dll"/>
        <include name="System.Data.dll"/>
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.util.dll"/>
      </references>
    </csc>

    <copy todir="${current.build.dir}">
      <fileset basedir="GuiComponents/UiKit">
        <include name="Success.jpg"/>
        <include name="Failure.jpg"/>
        <include name="Ignored.jpg"/>
      </fileset>
    </copy>
  </target>

  <target name="build-gui-runner" depends="make-build-dir">
    <csc target="library" 
       output="${current.build.dir}/nunit-gui-runner.dll" 
       win32icon="GuiRunner/nunit-gui/Logo.ico" debug="${build.debug}"
       define="${build.defines}">
      <sources basedir="GuiRunner/nunit-gui">
        <include name="AboutBox.cs"/>
        <include name="AddinDialog.cs"/>
        <include name="AppEntry.cs"/>
        <include name="AssemblyInfo.cs"/>
        <include name="DetailResults.cs"/>
        <include name="ExceptionDetailsForm.cs"/>
        <include name="GuiOptions.cs"/>
        <include name="NUnitForm.cs"/>
        <include name="OptionsDialog.cs"/>
        <include name="ProjectEditor.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <resources basedir="GuiRunner/nunit-gui">
        <include name="AboutBox.resx"/>
        <include name="AddinDialog.resx"/>
        <include name="ExceptionDetailsForm.resx"/>
        <include name="NUnitForm.resx"/>
        <include name="OptionsDialog.resx"/>
        <include name="ProjectEditor.resx"/>
        <include name="App.ico"/>
        <include name="Logo.ico"/>
      </resources>
      <references basedir="${current.build.dir}">
        <include name="System.Windows.Forms.dll"/>
        <include name="System.Drawing.dll"/>
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.util.dll"/>
        <include name="nunit.uikit.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.framework.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-gui-runner-exe" depends="make-build-dir">
    <csc target="winexe" 
        output="${current.build.dir}/${nunit.gui.name}" 
        win32icon="GuiRunner/nunit-gui-exe/App.ico" debug="${build.debug}"
        define="${build.defines}">
      <sources basedir="GuiRunner/nunit-gui-exe">
        <include name="AssemblyInfo.cs"/>
        <include name="Class1.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit-gui-runner.dll"/>
      </references>
    </csc>

    <copy file="GuiRunner/nunit-gui-exe/App.config"
      tofile="${current.build.dir}/${nunit.gui.name}.config"/>
  </target>

  <target name="build-mock-assembly" depends="make-build-dir">
    <csc target="library" 
      output="${current.build.dir}/mock-assembly.dll" 
      debug="${build.debug}" define="${build.defines}">
      <sources basedir="tests/mock-assembly">
        <include name="MockAssembly.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.framework.dll"/>
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
      </references>
    </csc>
    <copy file="tests/mock-assembly/mock-assembly.dll.config" todir="${current.build.dir}"/>
  </target>

  <target name="build-nonamespace-assembly" depends="make-build-dir">
    <csc target="library" 
       output="${current.build.dir}/nonamespace-assembly.dll" 
       debug="${build.debug}" define="${build.defines}">
      <sources basedir="tests/nonamespace-assembly">
        <include name="NoNamespaceTestFixture.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references>
        <include name="${current.build.dir}/nunit.framework.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-notestfixtures-assembly" depends="make-build-dir">
    <csc target="library" 
       output="${current.build.dir}/notestfixtures-assembly.dll"
       debug="${build.debug}" define="${build.defines}">
      <sources basedir="tests/notestfixtures-assembly">
        <include name="Class1.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
    </csc>
  </target>

  <target name="build-test-assembly" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/test-assembly.dll" 
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="tests/test-assembly">
        <include name="AttributeDescriptionTests.cs"/>
        <include name="CategoryAttributeTests.cs"/>
        <include name="ConsoleRunnerTest.cs"/>
        <include name="ExpectExceptionTest.cs"/>
        <include name="FailFixtureTests.cs"/>
        <include name="FixtureSetUpTearDownTests.cs"/>
        <include name="IgnoreFixtureTests.cs"/>
        <include name="PropertyAttributeTests.cs"/>
        <include name="RepeatedTestFixtureTests.cs"/>
        <include name="SetupFixtureTests.cs"/>
        <include name="SetUpTest.cs"/>
        <include name="SuiteBuilderTests.cs"/>
        <include name="TestCaseTest.cs"/>
        <include name="TestData.cs"/>
        <include name="TestFixtureBuilderTests.cs"/>
        <include name="TestFixtureExtensionTests.cs"/>
        <include name="TestFixtureTests.cs"/>
        <include name="UnhandledExceptions.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.framework.dll"/>
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.framework.extensions.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-test-utilities" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/test-utilities.dll" 
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="tests/test-utilities">
        <include name="FormTester.cs"/>
        <include name="MockTestEventSource.cs"/>
        <include name="TempResourceFile.cs"/>
        <include name="TestBuilder.cs"/>
        <include name="TestFinder.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="System.Windows.Forms.dll"/>
        <include name="nunit.framework.dll"/>
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.util.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-timing-tests" depends="make-build-dir">
    <csc target="library"
       output="${current.build.dir}/timing-tests.dll">
      <sources basedir="tests/timing-tests">
        <include name="AssemblyInfo.cs"/>
        <include name="ClientTimeoutFixture.cs"/>
        <include name="ServerTimeoutFixture.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.util.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.framework.dll"/>
        <include name="mock-assembly.dll"/>
      </references>
    </csc>
  </target>

  <target name="build-framework-tests" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit.framework.tests.dll"
        debug="${build.debug}" 
        define="${build.defines}">
      <nowarn>
        <warning number="618,672"/>
      </nowarn>
      <sources basedir="NUnitFramework/tests">
        <include name="ArrayEqualsFixture.cs"/>
        <include name="AssertExtensionTests.cs"/>
        <include name="AssertionTest.cs"/>
        <include name="CollectionAssertTest.cs"/>
        <include name="ConditionAssertTests.cs"/>
        <include name="EqualsFixture.cs"/>
        <include name="FailureMessageFixture.cs"/>
        <include name="FileAssertTests.cs"/>
        <include name="GreaterEqualFixture.cs"/>
        <include name="GreaterFixture.cs"/>
        <include name="LessEqualFixture.cs"/>
        <include name="LessFixture.cs"/>
        <include name="ListContentsTests.cs"/>
        <include name="NotEqualFixture.cs"/>
        <include name="NotSameFixture.cs"/>
        <include name="SameFixture.cs"/>
        <include name="StringAssertTests.cs"/>
        <include name="TypeAssertTests.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <resources basedir="NUnitFramework/tests" prefix="NUnit.Framework.Tests">
        <include name="TestImage1.jpg"/>
        <include name="TestImage2.jpg"/>
        <include name="TestText1.txt"/>
        <include name="TestText2.txt"/>
      </resources>
      <references basedir="${current.build.dir}">
        <include name="nunit.framework.dll"/>
        <include name="System.Data.dll"/>
      </references>
    </csc>

    <copy file="NUnitFramework/tests/nunit.framework.tests.dll.config"
      todir="${current.build.dir}"/>
  </target>

  <target name="build-core-tests" depends="make-build-dir">
    <csc target="library" 
       output="${current.build.dir}/nunit.core.tests.dll"
       debug="${build.debug}" 
       define="${build.defines}">
      <nowarn>
        <warning number="618,672"/>
      </nowarn>
      <sources basedir="NUnitCore/tests">
        <include name="AllTests.cs"/>
        <include name="AssemblyReaderTests.cs"/>
        <include name="AssemblyResolverTests.cs"/>
        <include name="AssemblyTests.cs"/>
        <include name="AssemblyVersionFixture.cs"/>
        <include name="AttributeDescriptionFixture.cs"/>
        <include name="BasicRunnerTests.cs"/>
        <include name="CallContextTests.cs"/>
        <include name="CategoryAttributeTests.cs"/>
        <include name="CoreExtensionsTests.cs"/>
        <include name="DirectorySwapperTests.cs"/>
        <include name="EventQueueTests.cs"/>
        <include name="EventTestFixture.cs"/>
        <include name="ExpectExceptionTest.cs"/>
        <include name="FailFixture.cs"/>
        <include name="FixtureSetUpTearDownTest.cs"/>
        <include name="IgnoreFixture.cs"/>
        <include name="LegacySuiteTests.cs"/>
        <include name="MockTestRunner.cs"/>
        <include name="NameFilterTest.cs"/>
        <include name="NamespaceAssemblyTests.cs"/>
        <include name="PlatformDetectionTests.cs"/>
        <include name="PropertyAttributeTests.cs"/>
        <include name="ReflectTests.cs"/>
        <include name="RemoteRunnerTests.cs"/>
        <include name="SerializationBug.cs"/>
        <include name="SetUpFixtureTests.cs"/>
        <include name="SetUpTest.cs"/>
        <include name="SimpleNameFilterTests.cs"/>
        <include name="SimpleTestRunnerTests.cs"/>
        <include name="StackOverflowTestFixture.cs"/>
        <include name="SuiteBuilderTests.cs"/>
        <include name="SuiteBuilderTests_Multiple.cs"/>
        <include name="TestCaseResultFixture.cs"/>
        <include name="TestCaseTest.cs"/>
        <include name="TestConsole.cs"/>
        <include name="TestDelegateFixture.cs"/>
        <include name="TestFixtureBuilderTests.cs"/>
        <include name="TestFixtureExtension.cs"/>
        <include name="TestFixtureTests.cs"/>
        <include name="TestFrameworkTests.cs"/>
        <include name="TestIdTests.cs"/>
        <include name="TestInfoTests.cs"/>
        <include name="TestNameTests.cs"/>
        <include name="TestNodeTests.cs"/>
        <include name="TestRunnerThreadTests.cs"/>
        <include name="TestSuiteResultFixture.cs"/>
        <include name="TestSuiteTest.cs"/>
        <include name="ThreadedTestRunnerTests.cs"/>
        <include name="UnhandledExceptionTests.cs"/>
        <include name="XmlTest.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <resources basedir="NUnitCore/tests" prefix="NUnit.Core.Tests">
        <include name="../core/Results.xsd"/>
      </resources>
      <references basedir="${current.build.dir}">
        <include name="nunit.framework.dll"/>
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.util.dll"/>
        <include name="nunit.mocks.dll"/>
        <include name="test-assembly.dll"/>
        <include name="test-utilities.dll"/>
        <include name="mock-assembly.dll"/>
        <include name="nonamespace-assembly.dll"/>
        <include name="System.Data.dll"/>
      </references>
    </csc>

    <copy file="NUnitCore/tests/nunit.core.tests.dll.config"
      todir="${current.build.dir}"/>
  </target>

  <target name="build-extension-tests" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit.extensions.tests.dll"
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="NUnitExtensions/tests">
        <include name="RepeatedTestFixture.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.framework.dll"/>
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.core.extensions.dll"/>
        <include name="nunit.core.tests.dll"/>
        <include name="test-assembly.dll"/>
      </references>
    </csc>
    <copy file="NUnitExtensions/tests/nunit.extensions.tests.dll.config"
      todir="${current.build.dir}"/>
  </target>

  <target name="build-mock-tests" depends="make-build-dir">
    <csc target="library"
       output="${current.build.dir}/nunit.mocks.tests.dll" 
       debug="${build.debug}" define="${build.defines}">
      <sources basedir="NUnitMocks/tests">
        <include name="AssemblyInfo.cs"/>
        <include name="DynamicMockTests.cs"/>
        <include name="MockTests.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.framework.dll"/>
        <include name="nunit.mocks.dll"/>
      </references>
    </csc>
    <copy file="NUnitMocks/tests/nunit.mocks.tests.dll.config"
      todir="${current.build.dir}"/>
  </target>

  <target name="build-util-tests" depends="make-build-dir">
    <csc target="library" 
       output="${current.build.dir}/nunit.util.tests.dll"
       debug="${build.debug}" define="${build.defines}">
      <sources basedir="ClientUtilities/tests">
        <include name="AssemblyListTests.cs"/>
        <include name="CategoryManagerTests.cs"/>
        <include name="EventDispatcherTests.cs"/>
        <include name="FileWatcherTest.cs"/>
        <include name="MemorySettingsStorageTests.cs"/>
        <include name="MockAssemblyWatcher.cs"/>
        <include name="NUnitProjectLoad.cs"/>
        <include name="NUnitProjectSave.cs"/>
        <include name="NUnitProjectTests.cs"/>
        <include name="NUnitProjectXml.cs"/>
        <include name="NUnitRegistryTests.cs"/>
        <include name="PathUtilTests.cs"/>
        <include name="ProcessRunnerTests.cs"/>
        <include name="ProjectConfigCollectionTests.cs"/>
        <include name="ProjectConfigTests.cs"/>
        <include name="RecentFileEntryTests.cs"/>
        <include name="RecentFilesTests.cs"/>
        <include name="RegistrySettingsStorageTests.cs"/>
        <include name="RemoteTestResultTest.cs"/>
        <include name="SettingsGroupTests.cs"/>
        <include name="SummaryResultFixture.cs"/>
        <include name="TestDomainFixture.cs"/>
        <include name="TestDomainTests_Multiple.cs"/>
        <include name="TestEventCatcher.cs"/>
        <include name="TestLoaderAssemblyTests.cs"/>
        <include name="VSProjectTests.cs"/>
        <include name="XmlResultVisitorTest.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <resources basedir="ClientUtilities/tests" prefix="NUnit.Util.Tests.resources">
        <include name="resources/*"/>
      </resources>
      <references basedir="${current.build.dir}">
        <include name="nunit.framework.dll"/>
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.util.dll"/>
        <include name="nunit.mocks.dll"/>
        <include name="nunit-server.dll"/>
        <include name="nunit.core.tests.dll"/>
        <include name="test-utilities.dll"/>
        <include name="mock-assembly.dll"/>
        <include name="nonamespace-assembly.dll"/>
        <include name="notestfixtures-assembly.dll"/>
      </references>
    </csc>
    <copy file="ClientUtilities/tests/nunit.util.tests.dll.config"
      todir="${current.build.dir}"/>
  </target>

  <target name="build-console-tests" depends="make-build-dir">
    <csc target="library" 
      output="${current.build.dir}/nunit-console.tests.dll"
      debug="${build.debug}" define="${build.defines}">
      <sources basedir="ConsoleRunner/tests">
        <include name="CommandLineTests.cs"/>
        <include name="CommandLineTests_MultipleAssemblies.cs"/>
        <include name="ConsoleRunnerTest.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.framework.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.framework.tests.dll"/>
        <include name="nunit.util.dll"/>
        <include name="nunit-console-runner.dll"/>
        <include name="test-assembly.dll"/>
      </references>
    </csc>
    <copy file="ConsoleRunner/tests/nunit-console.tests.dll.config"
      todir="${current.build.dir}"/>
  </target>

  <target name="build-test-server-tests" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit-server.tests.dll"
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="NUnitTestServer/tests">
        <include name="TestServerTests.cs"/>
        <include name="UtilityTests.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.framework.dll"/>
        <include name="nunit.util.dll"/>
        <include name="nunit-test-server.dll"/>
      </references>
    </csc>
    <copy file="NUnitTestServer/tests/nunit-server.tests.dll.config"
      todir="${current.build.dir}"/>
  </target>

  <target name="build-uikit-tests" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit.uikit.tests.dll" 
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="GuiComponents/tests">
        <include name="AddConfigurationDialogTests.cs"/>
        <include name="ErrorDisplayTests.cs"/>
        <include name="ProgressBarTests.cs"/>
        <include name="RecentFileMenuHandlerTests.cs"/>
        <include name="StatusBarTests.cs"/>
        <include name="TestSuiteTreeNodeTests.cs"/>
        <include name="TestSuiteTreeViewFixture.cs"/>
        <include name="TextBoxWriterTests.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="System.Windows.Forms.dll"/>
	<include name="System.Drawing.dll"/>
        <include name="nunit.framework.dll"/>
        <include name="nunit.core.interfaces.dll"/>
        <include name="nunit.core.dll"/>
        <include name="nunit.util.dll"/>
        <include name="nunit.uikit.dll"/>
        <include name="test-utilities.dll"/>
        <include name="mock-assembly.dll"/>
        <include name="notestfixtures-assembly.dll"/>
      </references>
    </csc>
    <copy file="GuiComponents/tests/nunit.uikit.tests.dll.config"
      todir="${current.build.dir}"/>
  </target>

  <target name="build-gui-runner-tests" depends="make-build-dir">
    <csc target="library" 
        output="${current.build.dir}/nunit-gui.tests.dll" 
        debug="${build.debug}" define="${build.defines}">
      <sources basedir="GuiRunner/tests">
        <include name="CommandLineTests.cs"/>
        <include name="ExceptionDetailsFormTests.cs"/>
        <include name="ProjectEditorTests.cs"/>
        <include name="../../CommonAssemblyInfo.cs"/>
      </sources>
      <references basedir="${current.build.dir}">
        <include name="System.Windows.Forms.dll"/>
	<include name="System.Drawing.dll"/>
        <include name="nunit-gui-runner.dll"/>
        <include name="nunit.util.dll"/>
        <include name="nunit.framework.dll"/>
        <include name="test-utilities.dll"/>
      </references>
    </csc>
    <copy file="GuiRunner/tests/nunit-gui.tests.dll.config"
      todir="${current.build.dir}"/>
  </target>

  <!-- Targets for running tests -->

  <target name="test" depends="build"
    description="Run tests for a build using console runner">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test run"/>
    <echo message="*"/>

    <!-- We use exec rather than the nunit2 task because we are testing
         a new build of NUnit which is likely not to be included in the Nant build -->
    <!-- Mono currently has a SIGSEGV fault if we run in a single AppDomain -->

    <property name="nunit.test.assemblies" 
      value="${nunit.base.tests} ${nunit.gui.tests}" if="${build.gui}"/>
    <property name="nunit.test.assemblies" 
      value="${nunit.base.tests}" unless="${build.gui}"/>
    <exec basedir="${current.build.dir}"
      workingdir="${current.build.dir}" 
	  program="${nunit.console.name}" 
      useruntimeengine="true"
	  commandline="${nunit.test.assemblies} ${nunit.options}"/>

  </target>

  <target name="test-framework" depends="build-framework">
    <exec basedir="${current.build.dir}"
      workingdir="${current.build.dir}"
      program="${nunit.console.name}"
      useruntimeengine="true"
      commandline="nunit.framework.tests.dll" />
  </target>

  <target name="test-coverage" depends="build"
    description="Run tests for a build under NCover to get coverage results">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test coverage run"/>
    <echo message="*"/>

    <!-- We use exec rather than the nunit2 task because we are testing
         a new build of NUnit which is likely not to be included in the Nant build -->
    <exec basedir="${ncover.dir}"
          workingdir="${current.build.dir}" 
	  program="${ncover.console.name}" 
      useruntimeengine="true"
	  commandline="${nunit.console.name} ${nunit.project.name} ${nunit.options} ${ncover.options}"
	if="${build.win32}" />

    <!-- Mono currently has a SIGSEGV fault if we run in a single AppDomain -->
         a new build of NUnit which is likely not to be included in the Nant build -->
    <exec basedir="${ncover.dir}"
          workingdir="${current.build.dir}" 
	  program="${ncover.console.name}" 
      useruntimeengine="true"
	  commandline="${nunit.console.name} ${nunit.test.assemblies} ${nunit.options}"
	unless="${build.win32}" />

  </target>

  <target name="test-all" 
      description="Test all runtime versions, debug and release">
    <call target="set-debug-build-config"/>
    <call target="test-all-runtimes"/>
    <call target="set-release-build-config"/>
    <call target="test-all-runtimes"/>
  </target>

  <target name="test-all-configs" 
      description="Test debug and release for selected runtime">
    <call target="set-debug-build-config"/>
    <call target="set-runtime-config"/>
    <call target="test"/>
    <call target="set-release-build-config"/>
    <call target="set-runtime-config"/>
    <call target="test"/>
  </target>

  <target name="test-all-runtimes"
      description="Test under each available runtime">
    <foreach item="String" delim="," 
        property="framework" in="${supported.frameworks}">
      <if test="${framework::sdk-exists( framework )}">
        <call target="set-${framework}-runtime-config"/>
        <call target="test" />
      </if>
    </foreach>
  </target>

  <target name="nunit2-test" depends="build"
    description="Run tests for a build using the nunit2 task">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test run"/>
    <echo message="*"/>

    <nunit2>
      <formatter type="Plain"/>
      <test assemblyname="${current.build.dir}/nunit.framework.tests.dll"/>
    </nunit2>
  </target>

  <target name="timing-test" depends="build"
    description="Run timing tests (long)">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} timing tests"/>
    <echo message="*"/>
    <echo message="* WARNING: Test may take some time to run"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}" 
      workingdir="${current.build.dir}" 
      program="${nunit.console.name}" 
      commandline="timing-tests.dll"/>

  </target>

  <target name="gui-test" depends="build"
    description="Run tests for a build using gui runner">

    <fail message="NUnit-gui is only available on Win32" unless="${platform::is-win32()}"/>

    <fail message="NUnit-gui is only available for Win32" unless="${platform::is-win32()}"/>

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} gui test run"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}" 
      workingdir="${current.build.dir}" 
      program="${nunit.gui.name}" 
      commandline="NunitTests.nunit"/>

  </target>

<!-- Targets to build the NUnit samples - not part of normal build -->
  <target name="build-samples" depends="build">
    <nant target="build">
      <buildfiles basedir="..\samples">
        <include name="**/*.build" />
      </buildfiles>
    </nant>
  </target>
<!-- Targets for packaging the NUnit distribution -->

  <!-- Produce all the standard packages for a release -->
  <target name="package-release" depends="build"
      description="Create standard packages for distribution">
      
    <call target="package-src"/>

    <call target="set-release-build-config"/>

    <call target="set-net-1.1-runtime-config"/>
    <call target="package-zip"/>
    <call target="package-msi" if="${platform::is-win32()}"/>

    <call target="set-net-2.0-runtime-config"/>
    <call target="package-zip"/>
    <call target="package-msi" if="${platform::is-win32()}"/>

  </target>

  
  <!-- Package current config as a zip --> 
  <target name="package-zip" depends="clean-package-dir" description="Create distribution package">

    <call target="copy-bins"/>
    <call target="copy-docs"/>
    <call target="copy-samples"/>

	<!-- Remove any temporary output files produced by tests
		from the build directory - temporary fix -->
    <delete>
      <fileset>
        <include name="temp*.xml"/>
      </fileset>
    </delete>

    <!-- Create the zip file -->
    <zip zipfile="${project.package.dir}/${zip.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

  <target name="package-src" depends="clean-package-dir"
    description="Create full source package for developer use">

    <call target="copy-docs"/>
    <call target="copy-samples"/>
    <call target="copy-src"/>

    <!-- Create the zip file -->
    <zip zipfile="${project.package.dir}/${zipped.src.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>
  
  <target name="package-resources" depends="clean-package-dir">

    <copy todir="${package.resource.dir}/nunit-gui-runner">
      <fileset basedir="GuiRunner/nunit-gui/obj/Release">
        <include name="*.resources"/>
      </fileset>
    </copy>

    <copy todir="${package.resource.dir}/nunit.uikit">
      <fileset basedir="GuiComponents/UiKit/obj/Release">
        <include name="NUnit.UiKit.AddConfigurationDialog.resources"/>
        <include name="NUnit.UiKit.AssemblyPathDialog.resources"/>
        <include name="NUnit.UiKit.ConfigurationEditor.resources"/>
        <include name="NUnit.UiKit.RenameConfigurationDialog.resources"/>
        <include name="NUnit.UiKit.TestPropertiesDialog.resources"/>
        <include name="NUnit.UiKit.TestTree.resources"/>
      </fileset>
    </copy>

    <copy todir="${package.working.dir}">
      <fileset basedir="../tools/localization">
        <include name="*.*"/>
      </fileset>
    </copy>

    <if test="${property::exists('localize')}">
    <foreach property="culture" item="String" delim="," 
        in="${localize}">
    <foreach property="folder" item="Folder" 
        in="${package.working.dir}/resources">
      <property name="proj" 
        value="${path::get-file-name(folder)}"/>
      <property name="projdir" 
        value="${package.working.dir}/${culture}/${proj}"/>
    <foreach property="file" item="File" in="${folder}">
      <property name="filename"
        value="${path::get-file-name-without-extension(file)}"/>
      <copy file="${file}" 
        tofile="${projdir}/${filename}.${culture}.resources"/>"/>
    </foreach>
    </foreach>
    </foreach>   
    </if>

    <zip zipfile="${project.package.dir}/${zipped.resource.file.name}" ziplevel="9">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>

  </target>

  <target name="package-msi" depends="clean-package-dir"
    description="Build msi file and deploy it to the package dir">
  
    <fail message="MSI can only be built on the Win32 platform" unless="${platform::is-win32()}"/>
    <fail message="MSI can only be built for a Win32 runtime" unless="${build.win32}"/>

    <echo message="*"/>
    <echo message="* Building msi for ${runtime.config}  ${build.config}"/>
    <echo message="*"/>

    <!-- First create a directory image as for zip installs -->
    <call target="copy-bins" />
    <call target="copy-docs" />
    <call target="copy-samples" />

    <copy file="license.rtf" todir="${package.working.dir}" />
    <copy file="GuiRunner/nunit-gui/Logo.ico" todir="${package.working.dir}" />

    <property name="wix.work.dir"
      value="${package.working.dir}"/>

    <candle out="${wix.work.dir}/" exedir="${wix.dir}">
      <defines>
        <define name="ProductVersion" value="${package.version}" />
        <define name="NominalVersion" value="${nominal.version}" />
      </defines>
      <sources basedir="${project.install.dir}">
        <include name="bin.wxs" />
        <include name="nunit-gui.wxs" />
        <include name="doc.wxs" />
        <include name="tests.wxs" />
        <include name="samples.wxs" />
        <include name="NUnit.wxs" />
      </sources>
    </candle>

    <light exedir="${wix.dir}"
      out="${project.package.dir}/${msi.file.name}" 
      locfile="${wix.dir}/WixUI_en-us.wxl">
      <sources>
        <include name="${wix.work.dir}/NUnit.wixobj" />
        <include name="${wix.work.dir}/bin.wixobj" />
        <include name="${wix.work.dir}/nunit-gui.wixobj" />
        <include name="${wix.work.dir}/doc.wixobj" />
        <include name="${wix.work.dir}/samples.wixobj" />
        <include name="${wix.work.dir}/tests.wixobj" />
        <include name="${wix.dir}/wixui.wixlib" />
      </sources>
    </light>

  </target>

</project>
