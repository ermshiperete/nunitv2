<?xml version="1.0"?>
<project name="NUnit" default="help" basedir=".">

<!-- ***************************************************************** -->
<!-- This script has been tested using NAnt 0.85. At least             -->
<!-- one of the supported runtimes and sdk must be installed. In       -->
<!-- order to build the msi, WiX 2.0 and the WiX tasks for NAnt        -->
<!-- are required. To run the test coverage target, NCover is          -->
<!-- required.                                                         -->
<!--                                                                   -->
<!-- Limitations:                                                      -->
<!-- 1. Currently, the .NET 1.0 builds of the GUI runner cannot be     -->
<!--    run successfully. The .NET 1.1 builds may be run under         -->
<!--    .NET 1.0, however.                                             -->
<!--                                                                   -->
<!-- 2. Running the GUI under Mono is still experimental. We have      -->
<!--    tested under Mono 1.2.2 and seen some stability issues.        -->
<!--    Later releases of Mono may resolve these problems.             -->
<!-- ***************************************************************** -->

<!-- ***************************************************************** -->
<!-- ***                 Default Help Target                       *** -->
<!-- ***************************************************************** -->

<target name="help" description="Displays additional help information">
  <echo>
    This build file will build NUnitLite for any of the supported
    runtime frameworks which are actually installed. To add or
    support for a framework, edit this script

    Running on the current system, the following runtime frameworks
    are available for building and testing NUnit:
  </echo>

  <foreach item="String" delim="," 
      property="framework" in="${installed.frameworks}">
    <echo message="        ${string::pad-right(framework,15,' ')}${framework::get-description(framework)}"/>
  </foreach>

  <echo>
    The default build target is the ${default.runtime} debug config.
    Generic runtime targets use the following defaults:
        net           ${default.net.runtime}
        mono          ${default.mono.runtime}

    Note that targets that set the build configuration or runtime
    to be used must come before action targets. For example:

        nant net-1.1 release build
        nant build-all
        nant debug clean build

    Use   nant -projecthelp to see a full list of targets.
  </echo>
</target>

<!-- ***************************************************************** -->
<!-- ********* Common properties that control the build ************** -->
<!-- ***************************************************************** -->
 
  <!-- Project name - used as a prefix for packages -->
  <property name="project.name" value="NUnit"/>

  <!-- NUnit version for packaging -->
  <property name="package.version" value="2.5"/>

  <!-- Root of the package file name. Add -beta or other
       suffix as necessary -->
  <property name="package.name" 
    value="${project.name}-${package.version}"/>

  <!-- Nominal version used for install directory and program
       files menu. Normally the same as the package version, 
       but may differ when we are in alpha or beta. -->
  <property name="nominal.version" value="2.5" />

  <!-- Frameworks supported by this build script. The first
         installed framework found is the default for builds. 
         The first .NET and Mono frameworks found are the
         respective net and mono defaults. -->
  <property name="supported.frameworks" 
    value="net-1.1,net-2.0,net-1.0,mono-1.0,mono-2.0"/>

  <!-- Framework versions for which packages are normally created -->
  <property name="standard.packages"
    value="net-1.1,net-2.0" />

  <property name="nunit.options" value=""/>

  <!-- Additional internal properties are set in the include file -->
  <include buildfile="nunit.build.include"/>

<!-- ***************************************************************** -->
<!-- ***          Targets that set the build configuration         *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="debug" depends="set-debug-build-config"
    description="Set config to debug for commands that follow"/>

  <target name="release" depends="set-release-build-config"
    description="Set config to release for commands that follow"/>

<!-- ***************************************************************** -->
<!-- ***         Targets that set the runtime configuration        *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="net" depends="set-default-dot-net-runtime-config"
    description="Set runtime to .NET 1.1 for commands that follow"/>

  <target name="net-1.0" depends="set-net-1.0-runtime-config"
    description="Set runtime to .NET 1.0 for commands that follow"/>

  <target name="net-1.1" depends="set-net-1.1-runtime-config"
    description="Set runtime to .NET 1.1 for commands that follow"/>
      
  <target name="net-2.0" depends="set-net-2.0-runtime-config"
    description="Set runtime to .NET 2.0 for commands that follow"/>
      
  <target name="mono" depends="set-default-mono-runtime-config"
    description="Set runtime to Mono 1.0 for commands that follow"/>

  <target name="mono-1.0" depends="set-mono-1.0-runtime-config"
    description="Set runtime to Mono 1.0 for commands that follow"/>
  
  <target name="mono-2.0" depends="set-mono-2.0-runtime-config"
    description="Set runtime to Mono 2.0 for commands that follow"/>

<!-- ***************************************************************** -->
<!-- ***             Targets that clean directories                *** -->
<!-- ***************************************************************** -->

  <target name="clean" depends="set-build-dir"
      description="Removes the current build directory">
    <delete dir="${current.build.dir}" 
      if="${directory::exists( current.build.dir )}"/>
  </target>

  <target name="clean-all" description="Removes all build directories">
    <delete dir="${project.build.dir}" 
      if="${directory::exists( project.build.dir )}"/>
  </target>

  <target name="clean-package-dir"
    description="Removes the current package working directory">
        <delete dir="${package.working.dir}" 
            if="${directory::exists( package.working.dir )}"/>
  </target>

  <target name="clean-source-dirs">
    <delete>
      <fileset basedir="${project.src.dir}">
        <include name="*/*/obj/**/*"/>
        <include name="*/*/bin/**/*"/>
      </fileset>
    </delete>
  </target>
.
<!-- ***************************************************************** -->
<!-- ***              Targets that perform builds                  *** -->
<!-- ***************************************************************** -->


  <target name="rebuild" depends="clean,build"
    description="Rebuild NUnit for default runtime version and config"/>

  <target name="build" depends="make-build-dir"
    description="Build NUnit for default runtime version and config">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} build"/>
    <echo message="*"/>

    <!-- Copy key file to base directory, so build can access it -->
<!--    <copy file="${project.src.dir}/nunit.snk" todir="${project.base.dir}"/>-->

    <!-- Copy external libraries -->
    <copy todir="${current.build.dir}">
      <fileset basedir="${project.lib.dir}">
        <include name="log4net.dll"/>
      </fileset>
    </copy>

    <!-- Build NUnit components and tests -->
    <nant target="build">
      <buildfiles refid="project.buildfiles" />
    </nant>

    <!-- Copy files for running tests -->
    <copy todir="${current.build.dir}">
      <fileset basedir="${project.base.dir}">
        <include name="NUnitTests.nunit" />
        <include name="NUnitTests.config" />
        <include name="NUnitFitTests.html" />
        <include name="clr.bat" />
      </fileset>
    </copy>

  </target>

  <target name="rebuild-all" depends="clean-all,build-all"
      description="Rebuild current config for all available runtimes"/>

  <target name="build-all"
      description="Build current config for all available runtime">

    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="build"/>

    </foreach>

  </target>

<!-- ***************************************************************** -->
<!-- ***                 Targets for running tests                 *** -->
<!-- ***************************************************************** -->

  <target name="test" depends="build,run-test"
    description="Build and run tests for selected config and runtime"/>

  <target name="run-test"
      description="Run tests for selected config and runtime (no rebuild)">

    <echo message="*"/>
    <echo message="* Testing ${runtime.config} ${build.config} build"/>
    <echo message="*    Running under ${nant.settings.currentframework}"/>
    <echo message="*"/>

    <!-- We use exec rather than the nunit2 task because we are testing
         a new build of NUnit which is likely not to be included in the Nant build -->
    <!-- Mono currently has a SIGSEGV fault if we run in a single AppDomain -->

    <property name="result.file" 
      value="TestResult-${nant.settings.currentframework}"/>
    <exec basedir="${current.build.dir}"
      workingdir="${current.build.dir}" 
	  program="nunit-console.exe" 
      useruntimeengine="true"
	  commandline="NUnitTests.nunit ${nunit.options} /xml:${result.file}.xml" />

  </target>

  <target name="test-coverage" depends="build"
    description="Run tests for a build under NCover to get coverage results">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test coverage run"/>
    <echo message="*"/>

    <property name="ncover.options" 
      value="//a nunit.framework;nunit.core;nunit.extensions;nunit.util;nunit.console;nunit.uikit;nunit-gui-runner"/>

    <!-- We use exec rather than the nunit2 task because we are testing
         a new build of NUnit which is likely not to be included in the Nant build -->
    <exec basedir="${ncover.dir}"
          workingdir="${current.build.dir}" 
	  program="NCover.Console.exe" 
      useruntimeengine="true"
	  commandline="nunit-console.exe NUnitTests.nunit ${nunit.options} ${ncover.options}"
	if="${build.win32}" />

    <!-- Mono currently has a SIGSEGV fault if we run in a single AppDomain -->
         a new build of NUnit which is likely not to be included in the Nant build -->
    <exec basedir="${ncover.dir}"
          workingdir="${current.build.dir}" 
	  program="NCover.Console.exe" 
          useruntimeengine="true"
	  commandline="nunit-console.exe NUnitTests.nunit ${nunit.options}"
	unless="${build.win32}" />

  </target>

  <target name="test-all"
      description="Build and test all runtimes for current config">

    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="test" />

    </foreach>

  </target>

  <target name="test-each-runtime" depends="build"
      description="Run tests for the current build under each runtime">

    <foreach item="String" delim=","
        property="framework" in="${supported.test.platforms}">

      <if test="${framework::exists( framework )}">
        <property name="nant.settings.currentframework"
            value="${framework}" />
        <call target="run-test" failonerror="false" />
      </if>

    </foreach>

    <property name="nant.settings.currentframework" value="${runtime.config}" />

    <echo message="*" />
    <echo message="* Restored runtime to ${nant.settings.currentframework}" />
    <echo message="*" />

  </target>

  <target name="test-all-under-each"
      description="Build all runtimes and test the builds under each runtime.">

    <call target="set-release-build-config"/>

    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="test-each-runtime" failonerror="false"/>

    </foreach>

  </target>

  <target name="nunit2-test" depends="build"
    description="Run tests for a build using the nunit2 task">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test run"/>
    <echo message="*"/>

    <nunit2>
      <formatter type="Plain"/>
      <test assemblyname="${current.build.dir}/nunit.framework.tests.dll"/>
    </nunit2>
  </target>

  <target name="timing-test" depends="build"
    description="Run timing tests (long)">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} timing tests"/>
    <echo message="*"/>
    <echo message="* WARNING: Test may take some time to run"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}" 
      workingdir="${current.build.dir}" 
      program="nunit-console.exe" 
      commandline="timing-tests.dll"/>

  </target>

  <target name="gui-test" depends="build"
    description="Run tests for a build using gui runner">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} gui test run"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}" 
      workingdir="${current.build.dir}" 
      program="nunit.exe" 
      useruntimeengine="true"
      commandline="NUnitTests.nunit -run"/>

  </target>

  <target name="fit-tests" depends="build"
    description="Run Fit Acceptance tests on the build">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} Fit Tests"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}" 
      workingdir="${current.build.dir}" 
      program="runfile.exe" 
      useruntimeengine="true"
      commandline="NUnitFitTests.html TestResults.html ." />

  </target>


<!-- ***************************************************************** -->
<!-- *       Build the NUnit samples - not part of normal build    *** -->
<!-- ***************************************************************** -->

  <property name="samples.bin.dir"
    value="${path::combine(project.samples.dir, 'bin')}"/>

  <target name="clean-samples" description="Removes the samples build directory">
    <delete dir="${samples.bin.dir}" />
  </target>

  <target name="build-samples" depends="build"
     description="Build the NUnit samples">
    
    <mkdir dir="${samples.bin.dir}" unless="${directory::exists(samples.bin.dir)}" />

    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.framework.dll')}" />
    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.core.interfaces.dll')}" />
    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.core.dll')}" />

    <nant target="build">
      <buildfiles refid="sample.buildfiles" />
    </nant>

  </target>

  <target name="rebuild-samples" depends="clean-samples,build-samples" 
      description="Rebuild the NUnit samples"/>

<!-- ***************************************************************** -->
<!-- ***         Targets for packaging the NUnit distribution      *** -->
<!-- ***************************************************************** -->

  <!-- Produce all the standard packages for a release -->
  <target name="package-release"
      description="Create standard packages for distribution">
      
    <call target="package-src"/>

    <call target="package-docs"/>

    <call target="set-release-build-config"/>

    <foreach item="String" delim="," 
        property="framework" in="${standard.packages}">

      <if test="${framework::sdk-exists( framework )}">
        <call target="set-${framework}-runtime-config"/>
        <call target="package"/>
      </if>

    </foreach>

  </target>

<!-- ***************************************************************** -->
<!-- ***                    Package binaries                       *** -->
<!-- ***************************************************************** -->

  <target name="package" depends="build-install-image"
      description="Create both binary and msi packages for current build" >

    <call target="create-zip" />

    <if test="${platform::is-win32() and build.win32}" >
      <call target="create-msi" />
    </if>

  </target>
  
  <!-- Package current config as a zip --> 
  <target name="package-zip" depends="build-install-image,create-zip"
    description="Create zip binary distribution package" />

  <!-- Package current config as an msi --> 
  <target name="package-msi" depends="build-install-image,create-msi"
    description="Build msi file and deploy it to the package dir" />

  <target name="create-zip" description="Create zip from existing image">
    <!-- Create the zip file -->
    <property name="zip.file.name" 
      value="${package.name}-${runtime.config}${build.suffix}.zip"/>
    <zip ziplevel="9"
        zipfile="${project.package.dir}/${zip.file.name}">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

  <target name="create-msi" description="Create msi from existing install image">
  
    <fail message="MSI can only be built on the Win32 platform" unless="${platform::is-win32()}"/>
    <fail message="MSI can only be built for a Win32 runtime" unless="${build.win32}"/>

    <property name="wix.dir"
      value="${project.tools.dir}/wix"/>
    <property name="work.dir"
      value="${package.working.dir}"/>
    <property name="install.dir"
      value="${project.src.dir}/install"/>
    <property name="msi.file.name"
      value="${package.name}-${runtime.config}${build.suffix}.msi"/>

    <candle out="${work.dir}/" exedir="${wix.dir}">
      <defines>
        <define name="ProductVersion" value="${package.version}" />
        <define name="NominalVersion" value="${nominal.version}" />
        <define name="RuntimeVersion" value="${runtime.version}" />
      </defines>
      <sources basedir="${install.dir}">
        <include name="bin.wxs" />
        <include name="nunit-gui.wxs" />
        <include name="doc.wxs" />
        <include name="tests.wxs" />
        <include name="samples.wxs" />
        <include name="NUnit.wxs" />
      </sources>
    </candle>

    <light exedir="${wix.dir}"
      out="${project.package.dir}/${msi.file.name}" 
      locfile="${wix.dir}/WixUI_en-us.wxl">
      <sources>
        <include name="${work.dir}/NUnit.wixobj" />
        <include name="${work.dir}/bin.wixobj" />
        <include name="${work.dir}/nunit-gui.wixobj" />
        <include name="${work.dir}/doc.wixobj" />
        <include name="${work.dir}/samples.wixobj" />
        <include name="${work.dir}/tests.wixobj" />
        <include name="${wix.dir}/wixui.wixlib" />
      </sources>
    </light>

  </target>

<!-- ***************************************************************** -->
<!-- ***                  Package source files                     *** -->
<!-- ***************************************************************** -->

  <target name="package-src" depends="clean-package-dir"
    description="Create full source package for developer use">

    <call target="copy-docs"/>
    <call target="copy-samples"/>
    <call target="copy-src"/>
    <call target="copy-tools" />

    <copy file="license.txt" todir="${package.working.dir}" />

    <!-- Create the zip file -->
    <zip  ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-src.zip">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

<!-- ***************************************************************** -->
<!-- ***                      Package docs                         *** -->
<!-- ***************************************************************** -->

  <target name="package-docs" depends="clean-package-dir">

    <call target="copy-docs"/>

    <!-- Create the zip file -->
    <zip ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-docs.zip">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>
    
  </target>
  
<!-- ***************************************************************** -->
<!-- ***                    Package resources                      *** -->
<!-- ***************************************************************** -->

  <target name="package-resources" depends="clean-package-dir">

    <copy todir="${package.resource.dir}/nunit-gui-runner">
      <fileset basedir="GuiRunner/nunit-gui/obj/Release">
        <include name="*.resources"/>
      </fileset>
    </copy>

    <copy todir="${package.resource.dir}/nunit.uikit">
      <fileset basedir="GuiComponents/UiKit/obj/Release">
        <include name="NUnit.UiKit.AddConfigurationDialog.resources"/>
        <include name="NUnit.UiKit.AssemblyPathDialog.resources"/>
        <include name="NUnit.UiKit.ConfigurationEditor.resources"/>
        <include name="NUnit.UiKit.RenameConfigurationDialog.resources"/>
        <include name="NUnit.UiKit.TestPropertiesDialog.resources"/>
        <include name="NUnit.UiKit.TestTree.resources"/>
      </fileset>
    </copy>

    <copy todir="${package.working.dir}">
      <fileset basedir="${project.tools.dir}/localization">
        <include name="*.*"/>
      </fileset>
    </copy>

    <if test="${property::exists('localize')}">
    <foreach property="culture" item="String" delim="," 
        in="${localize}">
    <foreach property="folder" item="Folder" 
        in="${package.working.dir}/resources">
      <property name="proj" 
        value="${path::get-file-name(folder)}"/>
      <property name="projdir" 
        value="${package.working.dir}/${culture}/${proj}"/>
    <foreach property="file" item="File" in="${folder}">
      <property name="filename"
        value="${path::get-file-name-without-extension(file)}"/>
      <copy file="${file}" 
        tofile="${projdir}/${filename}.${culture}.resources"/>"/>
    </foreach>
    </foreach>
    </foreach>   
    </if>

    <zip  ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-resources.zip">
      <fileset basedir="${package.working.dir}">
        <include name="**"/>
      </fileset>
    </zip>

  </target>

<!-- ***************************************************************** -->
<!-- ***            Helper targets used for packaging              *** -->
<!-- ***************************************************************** -->

  <target name="build-install-image" depends="clean-package-dir">

    <call target="copy-bins" />
    <call target="copy-docs" />
    <call target="copy-samples" />

    <copy file="license.txt" todir="${package.working.dir}" />
    <copy file="${project.tools.dir}/fit/license.txt"
          tofile="${package.working.dir}/fit-license.txt" />
    <copy file="${project.src.dir}/GuiRunner/nunit-gui/Logo.ico"
          todir="${package.working.dir}" />
    <copy file="NUnitFitTests.html"
          todir="${package.bin.dir}" />

  </target>

  <target name="copy-bins" depends="build">
    <mkdir dir="${package.bin.dir}"/>
    <copy todir="${package.bin.dir}">
      <fileset basedir="${current.build.dir}">
        <include name="*"/>
        <exclude name="*.wixobj"/>
        <exclude name="nunit-server.*"/>
        <exclude name="nunit-test-server.*"/>
      </fileset>
    </copy>
  </target>
  
  <target name="copy-docs">
    <mkdir dir="${package.doc.dir}"/>
    <copy todir="${package.doc.dir}">
      <fileset basedir="${project.doc.dir}">
        <include name="*.html"/>
	<include name="nunit.css"/>
        <include name="codeFuncs.js"/>
        <include name="favicon.ico"/>
	<include name="files/*"/>
	<include name="img/*"/>
        <exclude name="img/thumbs.db"/>
      </fileset>
    </copy>
  </target>

  <target name="copy-samples">

    <mkdir dir="${package.samples.dir}"/>

    <!-- Copy files that are not part of an individual project -->
    <copy todir="${package.samples.dir}">
      <fileset basedir="${project.samples.dir}">
        <include name="ReadMe.txt" />
        <include name="csharp/CSharp.sln" />
        <include name="jsharp/jsharp.sln" />
        <include name="vb/vb-samples.sln" />
        <include name="cpp/managed/managed-cpp.sln" />
        <include name="cpp/cpp-cli/cpp-cli.sln" />
        <include name="Extensibility/Core/CoreExtensibility.sln" />
        <include name="Extensibility/Core/Install.bat" />
      </fileset>
    </copy>

    <!-- Copy each project's files -->
    <nant target="package">
      <buildfiles refid="sample.buildfiles" />
    </nant>

  </target>

  <target name="copy-src">
    <delete dir="${package.src.dir}" />
    <mkdir dir="${package.src.dir}"/>

    <!-- Copy project top level files -->
    <copy todir="${package.working.dir}">
      <fileset basedir="${project.base.dir}">
        <include name="clr.bat"/>
        <include name="license.rtf"/>
        <include name="nunit.build"/>
        <include name="nunit.build.include"/>
        <include name="nunit.snk"/>
        <include name="NUnitFitTests.html"/>
        <include name="NUnitTests.config"/>
        <include name="NUnitTests.nunit"/>
      </fileset>
    </copy>

    <!-- Copy src dir files -->
    <copy todir="${package.src.dir}">
      <fileset basedir="${project.src.dir}">
        <include name="CommonAssemblyInfo.cs"/>
        <include name="nunit20under21.config"/>
        <include name="nunit20under22.config"/>
        <include name="nunit21under22.config"/>
      </fileset>
    </copy>

    <!-- Copy install directory files -->
    <copy todir="${package.install.dir}">
      <fileset basedir="${project.install.dir}">
        <include name="bin.wxs" />
        <include name="nunit-gui.wxs" />
        <include name="doc.wxs" />
        <include name="tests.wxs" />
        <include name="samples.wxs" />
        <include name="NUnit.wxs"/>
      </fileset>
    </copy>

    <!-- Copy individual projects -->
    <nant target="package" inheritrefs="true">
      <buildfiles refid="project.buildfiles" />
    </nant>

    <mkdir dir="${package.solutions.dir}" />

    <!-- Copy VS2003 solution -->
    <copy todir="${package.solutions.dir}/vs2003">
      <fileset basedir="${project.solutions.dir}/vs2003">
        <include name="nunit.sln"/>
        <include name="NUnitTests.nunit"/>
        <include name="NUnitTests.config"/>
        <include name="nunit.snk"/>
        <include name="**/*.csproj"/>
      </fileset>
    </copy>

    <!-- Copy VS2005 solution -->
    <copy todir="${package.solutions.dir}/vs2005">
      <fileset basedir="${project.solutions.dir}/vs2005">
        <include name="nunit.sln"/>
        <include name="NUnitTests.nunit"/>
        <include name="NUnitTests.config"/>
        <include name="nunit.snk"/>
        <include name="**/*.csproj"/>
      </fileset>
    </copy>

  </target>

  <target name="copy-tools">

    <mkdir dir="${package.tools.dir}" />

    <copy todir="${package.tools.dir}">
      <fileset basedir="${project.tools.dir}">
        <include name="fit/fit.dll"/>
        <include name="fit/runFile.exe"/>
        <include name="fit/runFile.exe.config"/>
        <include name="fit/license.txt"/>
      </fileset>
    </copy>

  </target>

<!-- ***************************************************************** -->
<!-- ***        Targets for installing the NUnit distribution      *** -->
<!-- ***************************************************************** -->

  <target name="install" depends="build-install-image"
      description="Install NUnit directly from the build">

  </target>

<!-- ***************************************************************** -->
<!-- *********      FileSets Used by Various Targets       *********** -->
<!-- ***************************************************************** -->

  <!-- Buildfiles for all NUnit components - in build order -->
  <fileset id="project.buildfiles" basedir="${project.src.dir}">

    <!-- NUnit Base -->
    <include name="NUnitFramework/framework/nunit.framework.build" />
    <include name="NUnitCore/interfaces/nunit.core.interfaces.build" />
    <include name="NUnitCore/core/nunit.core.build" />
    <include name="NUnitExtensions/framework/nunit.framework.extensions.build" />
    <include name="NUnitExtensions/core/nunit.core.extensions.build" />
    <include name="NUnitMocks/mocks/nunit.mocks.build" />
    <include name="ClientUtilities/util/nunit.util.build" />

    <!-- Console Runner -->
    <include name="ConsoleRunner/nunit-console/nunit-console.build" />
    <include name="ConsoleRunner/nunit-console-exe/nunit-console.exe.build" />

    <!-- Gui Runner -->
    <include name="GuiComponents/UiKit/nunit.uikit.build" />
    <include name="GuiRunner/nunit-gui/nunit-gui.build" />
    <include name="GuiRunner/nunit-gui-exe/nunit-gui.exe.build" />

    <!-- Test Server -->
    <include name="NUnitTestServer/nunit-server-exe/nunit-server.exe.build" />
    <include name="NUnitTestServer/nunit-agent-exe/nunit-agent.exe.build" />

    <!-- Test Utilities and Dummy Projects -->
    <include name="tests/mock-assembly/mock-assembly.build" />
    <include name="tests/nonamespace-assembly/nonamespace-assembly.build" />
    <include name="tests/test-assembly/test-assembly.build" />
    <include name="tests/test-utilities/test-utilities.build" />
    <include name="tests/timing-tests/timing-tests.build" />

    <!-- NUnit Base Tests -->
    <include name="NUnitFramework/tests/nunit.framework.tests.build" />
    <include name="NUnitCore/tests/nunit.core.tests.build" />
    <include name="NUnitExtensions/tests/nunit.extensions.tests.build" />
    <include name="NUnitMocks/tests/nunit.mocks.tests.build" />
    <include name="ClientUtilities/tests/nunit.util.tests.build" />

    <!-- Console Runner Tests -->
    <include name="ConsoleRunner/tests/nunit-console.tests.build" />

    <!-- GUI Tests -->
    <include name="GuiComponents/tests/nunit.uikit.tests.build" />
    <include name="GuiRunner/tests/nunit-gui.tests.build" />

    <!-- FIT Tests -->
    <include name="NUnitFixtures/fixtures/nunit.fixtures.build" />
    <include name="NUnitFixtures/tests/nunit.fixtures.tests.build" />
  </fileset>

  <!-- BuildFiles for Samples -->
  <fileset id="sample.buildfiles" basedir="${project.samples.dir}">

    <!-- CSharp Samples -->
    <include name="csharp/failures/cs-failures.build" />
    <include name="csharp/money/cs-money.build" />
    <include name="csharp/money-port/cs-money-port.build" />
    <include name="csharp/syntax/cs-syntax.build" />

    <!-- JSharp Samples -->
    <include name="jsharp/failures/jsharp-failures.build"
      if="${task::exists('vjc')}" />

    <!-- VB Samples -->
    <include name="vb/failures/vb-failures.build"
      if="${task::exists('vbc')}" />
    <include name="vb/money/vb-money.build"
      if="${task::exists('vbc')}" />
    <include name="vb/syntax/vb-syntax.build"
      if="${task::exists('vbc')}" />

    <!-- Managed C++ Samples -->
    <include name="cpp/managed/failures/cpp-managed-failures.build"/>

    <!-- C++/CLI Samples -->
    <include name="cpp/cpp-cli/failures/cpp-cli-failures.build"/>
    <include name="cpp/cpp-cli/syntax/cpp-cli-syntax.build"/>

    <!-- Extensibility Samples -->
    <include name="Extensibility/Core/Minimal/Minimal.build" />
    <include name="Extensibility/Core/SampleFixtureExtension/SampleFixtureExtension.build" />
    <include name="Extensibility/Core/SampleSuiteExtension/SampleSuiteExtension.build" />
    <include name="Extensibility/Core/MaxTimeDecorator/MaxTimeDecorator.build" />
  </fileset>

  <!-- Files to be copied to source directories -->
  <fileset id="source-files" >
        <include name="**/*.sln" />
        <include name="**/*.csproj" />
        <include name="**/*.config" />
        <include name="**/*.build" />
        <include name="**/*.cs" />
        <include name="**/*.xsd" />
        <include name="**/*.xslt" />
        <include name="**/*.resx" />
        <include name="**/*.jpg" />
        <include name="**/*.gif" />
        <include name="**/*.ico" />
        <include name="**/*.txt" />
        <include name="**/resources/*" />

        <exclude name="**/CVS/**" />
        <exclude name="**/bin/**" />
        <exclude name="**/obj/**" />
        <exclude name="**/Debug/**" />
        <exclude name="**/Release/**" />
  </fileset>

</project>
